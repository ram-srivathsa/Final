//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Mon Jul  9 22:30:30 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_put                     O     1 const
// mn_get                         O    36
// RDY_mn_get                     O     1
// RDY_ma_update                  O     1
// RDY_ma_flush                   O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_put_pc                      I    32 reg
// ma_update_update_val           I    67
// EN_ma_put                      I     1
// EN_ma_update                   I     1
// EN_ma_flush                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkbtb(CLK,
	     RST_N,

	     ma_put_pc,
	     EN_ma_put,
	     RDY_ma_put,

	     mn_get,
	     RDY_mn_get,

	     ma_update_update_val,
	     EN_ma_update,
	     RDY_ma_update,

	     EN_ma_flush,
	     RDY_ma_flush);
  input  CLK;
  input  RST_N;

  // action method ma_put
  input  [31 : 0] ma_put_pc;
  input  EN_ma_put;
  output RDY_ma_put;

  // value method mn_get
  output [35 : 0] mn_get;
  output RDY_mn_get;

  // action method ma_update
  input  [66 : 0] ma_update_update_val;
  input  EN_ma_update;
  output RDY_ma_update;

  // action method ma_flush
  input  EN_ma_flush;
  output RDY_ma_flush;

  // signals for module outputs
  wire [35 : 0] mn_get;
  wire RDY_ma_flush, RDY_ma_put, RDY_ma_update, RDY_mn_get;

  // inlined wires
  wire wr_hit_bram$wget, wr_hit_vrg$wget, wr_way_num$whas;

  // register rg_flush
  reg rg_flush;
  wire rg_flush$D_IN, rg_flush$EN;

  // register rg_flush_addr
  reg [4 : 0] rg_flush_addr;
  wire [4 : 0] rg_flush_addr$D_IN;
  wire rg_flush_addr$EN;

  // register rg_pc_copy
  reg [31 : 0] rg_pc_copy;
  wire [31 : 0] rg_pc_copy$D_IN;
  wire rg_pc_copy$EN;

  // register rg_rr_counter
  reg [4 : 0] rg_rr_counter;
  wire [4 : 0] rg_rr_counter$D_IN;
  wire rg_rr_counter$EN;

  // register vrg_uncond_0
  reg [63 : 0] vrg_uncond_0;
  wire [63 : 0] vrg_uncond_0$D_IN;
  wire vrg_uncond_0$EN;

  // register vrg_uncond_1
  reg [63 : 0] vrg_uncond_1;
  wire [63 : 0] vrg_uncond_1$D_IN;
  wire vrg_uncond_1$EN;

  // register vrg_uncond_10
  reg [63 : 0] vrg_uncond_10;
  wire [63 : 0] vrg_uncond_10$D_IN;
  wire vrg_uncond_10$EN;

  // register vrg_uncond_11
  reg [63 : 0] vrg_uncond_11;
  wire [63 : 0] vrg_uncond_11$D_IN;
  wire vrg_uncond_11$EN;

  // register vrg_uncond_12
  reg [63 : 0] vrg_uncond_12;
  wire [63 : 0] vrg_uncond_12$D_IN;
  wire vrg_uncond_12$EN;

  // register vrg_uncond_13
  reg [63 : 0] vrg_uncond_13;
  wire [63 : 0] vrg_uncond_13$D_IN;
  wire vrg_uncond_13$EN;

  // register vrg_uncond_14
  reg [63 : 0] vrg_uncond_14;
  wire [63 : 0] vrg_uncond_14$D_IN;
  wire vrg_uncond_14$EN;

  // register vrg_uncond_15
  reg [63 : 0] vrg_uncond_15;
  wire [63 : 0] vrg_uncond_15$D_IN;
  wire vrg_uncond_15$EN;

  // register vrg_uncond_16
  reg [63 : 0] vrg_uncond_16;
  wire [63 : 0] vrg_uncond_16$D_IN;
  wire vrg_uncond_16$EN;

  // register vrg_uncond_2
  reg [63 : 0] vrg_uncond_2;
  wire [63 : 0] vrg_uncond_2$D_IN;
  wire vrg_uncond_2$EN;

  // register vrg_uncond_3
  reg [63 : 0] vrg_uncond_3;
  wire [63 : 0] vrg_uncond_3$D_IN;
  wire vrg_uncond_3$EN;

  // register vrg_uncond_4
  reg [63 : 0] vrg_uncond_4;
  wire [63 : 0] vrg_uncond_4$D_IN;
  wire vrg_uncond_4$EN;

  // register vrg_uncond_5
  reg [63 : 0] vrg_uncond_5;
  wire [63 : 0] vrg_uncond_5$D_IN;
  wire vrg_uncond_5$EN;

  // register vrg_uncond_6
  reg [63 : 0] vrg_uncond_6;
  wire [63 : 0] vrg_uncond_6$D_IN;
  wire vrg_uncond_6$EN;

  // register vrg_uncond_7
  reg [63 : 0] vrg_uncond_7;
  wire [63 : 0] vrg_uncond_7$D_IN;
  wire vrg_uncond_7$EN;

  // register vrg_uncond_8
  reg [63 : 0] vrg_uncond_8;
  wire [63 : 0] vrg_uncond_8$D_IN;
  wire vrg_uncond_8$EN;

  // register vrg_uncond_9
  reg [63 : 0] vrg_uncond_9;
  wire [63 : 0] vrg_uncond_9$D_IN;
  wire vrg_uncond_9$EN;

  // ports of submodule bram_replacement
  wire [3 : 0] bram_replacement$ADDRA, bram_replacement$ADDRB;
  wire [1 : 0] bram_replacement$DIA,
	       bram_replacement$DIB,
	       bram_replacement$DOA;
  wire bram_replacement$ENA,
       bram_replacement$ENB,
       bram_replacement$WEA,
       bram_replacement$WEB;

  // ports of submodule bram_way_1
  wire [38 : 0] bram_way_1$DIA, bram_way_1$DIB, bram_way_1$DOA;
  wire [3 : 0] bram_way_1$ADDRA, bram_way_1$ADDRB;
  wire bram_way_1$ENA, bram_way_1$ENB, bram_way_1$WEA, bram_way_1$WEB;

  // ports of submodule bram_way_2
  wire [38 : 0] bram_way_2$DIA, bram_way_2$DIB, bram_way_2$DOA;
  wire [3 : 0] bram_way_2$ADDRA, bram_way_2$ADDRB;
  wire bram_way_2$ENA, bram_way_2$ENB, bram_way_2$WEA, bram_way_2$WEB;

  // ports of submodule bram_way_3
  wire [38 : 0] bram_way_3$DIA, bram_way_3$DIB, bram_way_3$DOA;
  wire [3 : 0] bram_way_3$ADDRA, bram_way_3$ADDRB;
  wire bram_way_3$ENA, bram_way_3$ENB, bram_way_3$WEA, bram_way_3$WEB;

  // ports of submodule bram_way_4
  wire [38 : 0] bram_way_4$DIA, bram_way_4$DIB, bram_way_4$DOA;
  wire [3 : 0] bram_way_4$ADDRA, bram_way_4$ADDRB;
  wire bram_way_4$ENA, bram_way_4$ENB, bram_way_4$WEA, bram_way_4$WEB;

  // inputs to muxes for submodule ports
  wire [38 : 0] MUX_bram_way_1$b_put_3__VAL_2;
  wire [4 : 0] MUX_rg_flush_addr$write_1__VAL_1;
  wire [1 : 0] MUX_bram_replacement$b_put_3__VAL_2;
  wire MUX_bram_replacement$b_put_1__SEL_1,
       MUX_rg_flush$write_1__SEL_1,
       MUX_vrg_uncond_0$write_1__SEL_1,
       MUX_vrg_uncond_1$write_1__SEL_1,
       MUX_vrg_uncond_10$write_1__SEL_1,
       MUX_vrg_uncond_11$write_1__SEL_1,
       MUX_vrg_uncond_12$write_1__SEL_1,
       MUX_vrg_uncond_13$write_1__SEL_1,
       MUX_vrg_uncond_14$write_1__SEL_1,
       MUX_vrg_uncond_15$write_1__SEL_1,
       MUX_vrg_uncond_16$write_1__SEL_1,
       MUX_vrg_uncond_2$write_1__SEL_1,
       MUX_vrg_uncond_3$write_1__SEL_1,
       MUX_vrg_uncond_4$write_1__SEL_1,
       MUX_vrg_uncond_5$write_1__SEL_1,
       MUX_vrg_uncond_6$write_1__SEL_1,
       MUX_vrg_uncond_7$write_1__SEL_1,
       MUX_vrg_uncond_8$write_1__SEL_1,
       MUX_vrg_uncond_9$write_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC___d156;
  reg [1 : 0] mn_get_way_num__h6330;
  reg IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC___d197;
  wire [31 : 0] IF_vrg_uncond_11_4_BITS_63_TO_32_5_EQ_rg_pc_co_ETC___d134,
		IF_vrg_uncond_13_8_BITS_63_TO_32_9_EQ_rg_pc_co_ETC___d136,
		IF_vrg_uncond_15_2_BITS_63_TO_32_3_EQ_rg_pc_co_ETC___d138,
		IF_vrg_uncond_1_4_BITS_63_TO_32_5_EQ_rg_pc_cop_ETC___d124,
		IF_vrg_uncond_3_8_BITS_63_TO_32_9_EQ_rg_pc_cop_ETC___d126,
		IF_vrg_uncond_5_2_BITS_63_TO_32_3_EQ_rg_pc_cop_ETC___d128,
		IF_vrg_uncond_7_6_BITS_63_TO_32_7_EQ_rg_pc_cop_ETC___d130,
		IF_vrg_uncond_9_0_BITS_63_TO_32_1_EQ_rg_pc_cop_ETC___d132,
		mn_get_branch_pc__h6331,
		new_value__h4257,
		new_value__h4278,
		y_avValue_snd__h2629,
		y_avValue_snd__h2743,
		y_avValue_snd__h2857,
		y_avValue_snd__h2971,
		y_avValue_snd__h3036,
		y_avValue_snd__h3041,
		y_avValue_snd__h3046,
		y_avValue_snd__h3051;
  wire [11 : 0] IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC__q5,
		bram_way_1DOA_BITS_12_TO_1__q1,
		bram_way_2DOA_BITS_12_TO_1__q2,
		bram_way_3DOA_BITS_12_TO_1__q3,
		bram_way_4DOA_BITS_12_TO_1__q4;
  wire [4 : 0] x__h7119;
  wire [3 : 0] x__h2286;
  wire NOT_vrg_uncond_12_1_BITS_63_TO_32_2_EQ_rg_pc_c_ETC___d189,
       NOT_vrg_uncond_6_9_BITS_63_TO_32_0_EQ_rg_pc_co_ETC___d183,
       lv_compare1__h2269,
       lv_compare2__h2270,
       lv_compare3__h2271,
       lv_compare4__h2272,
       vrg_uncond_0_7_BITS_63_TO_32_8_EQ_rg_pc_copy___d89,
       vrg_uncond_10_7_BITS_63_TO_32_8_EQ_rg_pc_copy___d59,
       vrg_uncond_11_4_BITS_63_TO_32_5_EQ_rg_pc_copy___d56,
       vrg_uncond_12_1_BITS_63_TO_32_2_EQ_rg_pc_copy__ETC___d101,
       vrg_uncond_12_1_BITS_63_TO_32_2_EQ_rg_pc_copy___d53,
       vrg_uncond_13_8_BITS_63_TO_32_9_EQ_rg_pc_copy___d50,
       vrg_uncond_14_5_BITS_63_TO_32_6_EQ_rg_pc_copy___d47,
       vrg_uncond_15_2_BITS_63_TO_32_3_EQ_rg_pc_copy__ETC___d104,
       vrg_uncond_15_2_BITS_63_TO_32_3_EQ_rg_pc_copy___d44,
       vrg_uncond_16_9_BITS_63_TO_32_0_EQ_rg_pc_copy___d41,
       vrg_uncond_1_4_BITS_63_TO_32_5_EQ_rg_pc_copy___d86,
       vrg_uncond_2_1_BITS_63_TO_32_2_EQ_rg_pc_copy___d83,
       vrg_uncond_3_8_BITS_63_TO_32_9_EQ_rg_pc_copy___d80,
       vrg_uncond_4_5_BITS_63_TO_32_6_EQ_rg_pc_copy___d77,
       vrg_uncond_5_2_BITS_63_TO_32_3_EQ_rg_pc_copy___d74,
       vrg_uncond_6_9_BITS_63_TO_32_0_EQ_rg_pc_copy_1_ETC___d95,
       vrg_uncond_6_9_BITS_63_TO_32_0_EQ_rg_pc_copy___d71,
       vrg_uncond_7_6_BITS_63_TO_32_7_EQ_rg_pc_copy___d68,
       vrg_uncond_8_3_BITS_63_TO_32_4_EQ_rg_pc_copy___d65,
       vrg_uncond_9_0_BITS_63_TO_32_1_EQ_rg_pc_copy___d62;

  // action method ma_put
  assign RDY_ma_put = 1'd1 ;

  // value method mn_get
  assign mn_get =
	     { wr_hit_bram$wget,
	       wr_hit_vrg$wget,
	       mn_get_way_num__h6330,
	       mn_get_branch_pc__h6331 } ;
  assign RDY_mn_get = wr_way_num$whas ;

  // action method ma_update
  assign RDY_ma_update = !rg_flush ;

  // action method ma_flush
  assign RDY_ma_flush = !rg_flush ;

  // submodule bram_replacement
  BRAM2Load #(.FILENAME("repl.dump"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd4),
	      .DATA_WIDTH(32'd2),
	      .MEMSIZE(5'd16),
	      .BINARY(1'd1)) bram_replacement(.CLKA(CLK),
					      .CLKB(CLK),
					      .ADDRA(bram_replacement$ADDRA),
					      .ADDRB(bram_replacement$ADDRB),
					      .DIA(bram_replacement$DIA),
					      .DIB(bram_replacement$DIB),
					      .WEA(bram_replacement$WEA),
					      .WEB(bram_replacement$WEB),
					      .ENA(bram_replacement$ENA),
					      .ENB(bram_replacement$ENB),
					      .DOA(bram_replacement$DOA),
					      .DOB());

  // submodule bram_way_1
  BRAM2Load #(.FILENAME("way1.dump"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd4),
	      .DATA_WIDTH(32'd39),
	      .MEMSIZE(5'd16),
	      .BINARY(1'd1)) bram_way_1(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_way_1$ADDRA),
					.ADDRB(bram_way_1$ADDRB),
					.DIA(bram_way_1$DIA),
					.DIB(bram_way_1$DIB),
					.WEA(bram_way_1$WEA),
					.WEB(bram_way_1$WEB),
					.ENA(bram_way_1$ENA),
					.ENB(bram_way_1$ENB),
					.DOA(bram_way_1$DOA),
					.DOB());

  // submodule bram_way_2
  BRAM2Load #(.FILENAME("way1.dump"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd4),
	      .DATA_WIDTH(32'd39),
	      .MEMSIZE(5'd16),
	      .BINARY(1'd1)) bram_way_2(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_way_2$ADDRA),
					.ADDRB(bram_way_2$ADDRB),
					.DIA(bram_way_2$DIA),
					.DIB(bram_way_2$DIB),
					.WEA(bram_way_2$WEA),
					.WEB(bram_way_2$WEB),
					.ENA(bram_way_2$ENA),
					.ENB(bram_way_2$ENB),
					.DOA(bram_way_2$DOA),
					.DOB());

  // submodule bram_way_3
  BRAM2Load #(.FILENAME("way1.dump"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd4),
	      .DATA_WIDTH(32'd39),
	      .MEMSIZE(5'd16),
	      .BINARY(1'd1)) bram_way_3(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_way_3$ADDRA),
					.ADDRB(bram_way_3$ADDRB),
					.DIA(bram_way_3$DIA),
					.DIB(bram_way_3$DIB),
					.WEA(bram_way_3$WEA),
					.WEB(bram_way_3$WEB),
					.ENA(bram_way_3$ENA),
					.ENB(bram_way_3$ENB),
					.DOA(bram_way_3$DOA),
					.DOB());

  // submodule bram_way_4
  BRAM2Load #(.FILENAME("way1.dump"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd4),
	      .DATA_WIDTH(32'd39),
	      .MEMSIZE(5'd16),
	      .BINARY(1'd1)) bram_way_4(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_way_4$ADDRA),
					.ADDRB(bram_way_4$ADDRB),
					.DIA(bram_way_4$DIA),
					.DIB(bram_way_4$DIB),
					.WEA(bram_way_4$WEA),
					.WEB(bram_way_4$WEB),
					.ENA(bram_way_4$ENA),
					.ENB(bram_way_4$ENB),
					.DOA(bram_way_4$DOA),
					.DOB());

  // inputs to muxes for submodule ports
  assign MUX_bram_replacement$b_put_1__SEL_1 = rg_flush && !rg_flush_addr[4] ;
  assign MUX_rg_flush$write_1__SEL_1 = rg_flush && rg_flush_addr[4] ;
  assign MUX_vrg_uncond_0$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd0 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_1$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd1 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_10$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd10 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_11$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd11 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_12$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd12 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_13$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd13 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_14$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd14 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_15$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd15 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_16$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd16 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_2$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd2 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_3$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd3 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_4$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd4 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_5$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd5 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_6$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd6 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_7$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd7 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_8$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd8 &&
	     !ma_update_update_val[66] ;
  assign MUX_vrg_uncond_9$write_1__SEL_1 =
	     EN_ma_update && rg_rr_counter == 5'd9 &&
	     !ma_update_update_val[66] ;
  assign MUX_bram_replacement$b_put_3__VAL_2 =
	     ma_update_update_val[1:0] + 2'd1 ;
  assign MUX_bram_way_1$b_put_3__VAL_2 =
	     { ma_update_update_val[65:40],
	       ma_update_update_val[13:2],
	       1'd1 } ;
  assign MUX_rg_flush_addr$write_1__VAL_1 = rg_flush_addr + 5'd1 ;

  // inlined wires
  assign wr_way_num$whas =
	     x__h2286 == 4'b1000 || x__h2286 == 4'b0100 ||
	     x__h2286 == 4'b0010 ||
	     x__h2286 == 4'b0001 ||
	     x__h2286 == 4'b0 ;
  assign wr_hit_bram$wget =
	     !vrg_uncond_16_9_BITS_63_TO_32_0_EQ_rg_pc_copy___d41 &&
	     !vrg_uncond_15_2_BITS_63_TO_32_3_EQ_rg_pc_copy___d44 &&
	     !vrg_uncond_14_5_BITS_63_TO_32_6_EQ_rg_pc_copy___d47 &&
	     !vrg_uncond_13_8_BITS_63_TO_32_9_EQ_rg_pc_copy___d50 &&
	     NOT_vrg_uncond_12_1_BITS_63_TO_32_2_EQ_rg_pc_c_ETC___d189 &&
	     IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC___d197 ;
  assign wr_hit_vrg$wget =
	     vrg_uncond_16_9_BITS_63_TO_32_0_EQ_rg_pc_copy___d41 ||
	     vrg_uncond_15_2_BITS_63_TO_32_3_EQ_rg_pc_copy__ETC___d104 ;

  // register rg_flush
  assign rg_flush$D_IN = !MUX_rg_flush$write_1__SEL_1 ;
  assign rg_flush$EN = rg_flush && rg_flush_addr[4] || EN_ma_flush ;

  // register rg_flush_addr
  assign rg_flush_addr$D_IN =
	     MUX_bram_replacement$b_put_1__SEL_1 ?
	       MUX_rg_flush_addr$write_1__VAL_1 :
	       5'd0 ;
  assign rg_flush_addr$EN = rg_flush && !rg_flush_addr[4] || EN_ma_flush ;

  // register rg_pc_copy
  assign rg_pc_copy$D_IN = ma_put_pc ;
  assign rg_pc_copy$EN = EN_ma_put ;

  // register rg_rr_counter
  assign rg_rr_counter$D_IN = (rg_rr_counter == 5'd16) ? 5'd0 : x__h7119 ;
  assign rg_rr_counter$EN = EN_ma_update && !ma_update_update_val[66] ;

  // register vrg_uncond_0
  assign vrg_uncond_0$D_IN =
	     MUX_vrg_uncond_0$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_0$EN =
	     EN_ma_update && rg_rr_counter == 5'd0 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_1
  assign vrg_uncond_1$D_IN =
	     MUX_vrg_uncond_1$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_1$EN =
	     EN_ma_update && rg_rr_counter == 5'd1 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_10
  assign vrg_uncond_10$D_IN =
	     MUX_vrg_uncond_10$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_10$EN =
	     EN_ma_update && rg_rr_counter == 5'd10 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_11
  assign vrg_uncond_11$D_IN =
	     MUX_vrg_uncond_11$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_11$EN =
	     EN_ma_update && rg_rr_counter == 5'd11 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_12
  assign vrg_uncond_12$D_IN =
	     MUX_vrg_uncond_12$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_12$EN =
	     EN_ma_update && rg_rr_counter == 5'd12 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_13
  assign vrg_uncond_13$D_IN =
	     MUX_vrg_uncond_13$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_13$EN =
	     EN_ma_update && rg_rr_counter == 5'd13 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_14
  assign vrg_uncond_14$D_IN =
	     MUX_vrg_uncond_14$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_14$EN =
	     EN_ma_update && rg_rr_counter == 5'd14 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_15
  assign vrg_uncond_15$D_IN =
	     MUX_vrg_uncond_15$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_15$EN =
	     EN_ma_update && rg_rr_counter == 5'd15 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_16
  assign vrg_uncond_16$D_IN =
	     MUX_vrg_uncond_16$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_16$EN =
	     EN_ma_update && rg_rr_counter == 5'd16 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_2
  assign vrg_uncond_2$D_IN =
	     MUX_vrg_uncond_2$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_2$EN =
	     EN_ma_update && rg_rr_counter == 5'd2 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_3
  assign vrg_uncond_3$D_IN =
	     MUX_vrg_uncond_3$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_3$EN =
	     EN_ma_update && rg_rr_counter == 5'd3 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_4
  assign vrg_uncond_4$D_IN =
	     MUX_vrg_uncond_4$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_4$EN =
	     EN_ma_update && rg_rr_counter == 5'd4 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_5
  assign vrg_uncond_5$D_IN =
	     MUX_vrg_uncond_5$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_5$EN =
	     EN_ma_update && rg_rr_counter == 5'd5 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_6
  assign vrg_uncond_6$D_IN =
	     MUX_vrg_uncond_6$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_6$EN =
	     EN_ma_update && rg_rr_counter == 5'd6 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_7
  assign vrg_uncond_7$D_IN =
	     MUX_vrg_uncond_7$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_7$EN =
	     EN_ma_update && rg_rr_counter == 5'd7 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_8
  assign vrg_uncond_8$D_IN =
	     MUX_vrg_uncond_8$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_8$EN =
	     EN_ma_update && rg_rr_counter == 5'd8 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // register vrg_uncond_9
  assign vrg_uncond_9$D_IN =
	     MUX_vrg_uncond_9$write_1__SEL_1 ?
	       ma_update_update_val[65:2] :
	       64'd0 ;
  assign vrg_uncond_9$EN =
	     EN_ma_update && rg_rr_counter == 5'd9 &&
	     !ma_update_update_val[66] ||
	     rg_flush ;

  // submodule bram_replacement
  assign bram_replacement$ADDRA = ma_put_pc[5:2] ;
  assign bram_replacement$ADDRB =
	     MUX_bram_replacement$b_put_1__SEL_1 ?
	       rg_flush_addr[3:0] :
	       ma_update_update_val[39:36] ;
  assign bram_replacement$DIA = 2'b10 /* unspecified value */  ;
  assign bram_replacement$DIB =
	     MUX_bram_replacement$b_put_1__SEL_1 ?
	       2'd0 :
	       MUX_bram_replacement$b_put_3__VAL_2 ;
  assign bram_replacement$WEA = 1'd0 ;
  assign bram_replacement$WEB = 1'd1 ;
  assign bram_replacement$ENA = EN_ma_put ;
  assign bram_replacement$ENB =
	     rg_flush && !rg_flush_addr[4] ||
	     EN_ma_update && ma_update_update_val[66] ;

  // submodule bram_way_1
  assign bram_way_1$ADDRA = ma_put_pc[5:2] ;
  assign bram_way_1$ADDRB =
	     MUX_bram_replacement$b_put_1__SEL_1 ?
	       rg_flush_addr[3:0] :
	       ma_update_update_val[39:36] ;
  assign bram_way_1$DIA = 39'h2AAAAAAAAA /* unspecified value */  ;
  assign bram_way_1$DIB =
	     MUX_bram_replacement$b_put_1__SEL_1 ?
	       39'd0 :
	       MUX_bram_way_1$b_put_3__VAL_2 ;
  assign bram_way_1$WEA = 1'd0 ;
  assign bram_way_1$WEB = 1'd1 ;
  assign bram_way_1$ENA = EN_ma_put ;
  assign bram_way_1$ENB =
	     rg_flush && !rg_flush_addr[4] ||
	     EN_ma_update && ma_update_update_val[66] &&
	     ma_update_update_val[1:0] == 2'd0 ;

  // submodule bram_way_2
  assign bram_way_2$ADDRA = ma_put_pc[5:2] ;
  assign bram_way_2$ADDRB =
	     MUX_bram_replacement$b_put_1__SEL_1 ?
	       rg_flush_addr[3:0] :
	       ma_update_update_val[39:36] ;
  assign bram_way_2$DIA = 39'h2AAAAAAAAA /* unspecified value */  ;
  assign bram_way_2$DIB =
	     MUX_bram_replacement$b_put_1__SEL_1 ?
	       39'd0 :
	       MUX_bram_way_1$b_put_3__VAL_2 ;
  assign bram_way_2$WEA = 1'd0 ;
  assign bram_way_2$WEB = 1'd1 ;
  assign bram_way_2$ENA = EN_ma_put ;
  assign bram_way_2$ENB =
	     rg_flush && !rg_flush_addr[4] ||
	     EN_ma_update && ma_update_update_val[66] &&
	     ma_update_update_val[1:0] == 2'd1 ;

  // submodule bram_way_3
  assign bram_way_3$ADDRA = ma_put_pc[5:2] ;
  assign bram_way_3$ADDRB =
	     MUX_bram_replacement$b_put_1__SEL_1 ?
	       rg_flush_addr[3:0] :
	       ma_update_update_val[39:36] ;
  assign bram_way_3$DIA = 39'h2AAAAAAAAA /* unspecified value */  ;
  assign bram_way_3$DIB =
	     MUX_bram_replacement$b_put_1__SEL_1 ?
	       39'd0 :
	       MUX_bram_way_1$b_put_3__VAL_2 ;
  assign bram_way_3$WEA = 1'd0 ;
  assign bram_way_3$WEB = 1'd1 ;
  assign bram_way_3$ENA = EN_ma_put ;
  assign bram_way_3$ENB =
	     rg_flush && !rg_flush_addr[4] ||
	     EN_ma_update && ma_update_update_val[66] &&
	     ma_update_update_val[1:0] == 2'd2 ;

  // submodule bram_way_4
  assign bram_way_4$ADDRA = ma_put_pc[5:2] ;
  assign bram_way_4$ADDRB =
	     MUX_bram_replacement$b_put_1__SEL_1 ?
	       rg_flush_addr[3:0] :
	       ma_update_update_val[39:36] ;
  assign bram_way_4$DIA = 39'h2AAAAAAAAA /* unspecified value */  ;
  assign bram_way_4$DIB =
	     MUX_bram_replacement$b_put_1__SEL_1 ?
	       39'd0 :
	       MUX_bram_way_1$b_put_3__VAL_2 ;
  assign bram_way_4$WEA = 1'd0 ;
  assign bram_way_4$WEB = 1'd1 ;
  assign bram_way_4$ENA = EN_ma_put ;
  assign bram_way_4$ENB =
	     rg_flush && !rg_flush_addr[4] ||
	     EN_ma_update && ma_update_update_val[66] &&
	     ma_update_update_val[1:0] == 2'd3 ;

  // remaining internal signals
  assign IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC__q5 =
	     IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC___d156[11:0] ;
  assign IF_vrg_uncond_11_4_BITS_63_TO_32_5_EQ_rg_pc_co_ETC___d134 =
	     vrg_uncond_11_4_BITS_63_TO_32_5_EQ_rg_pc_copy___d56 ?
	       vrg_uncond_11[31:0] :
	       (vrg_uncond_10_7_BITS_63_TO_32_8_EQ_rg_pc_copy___d59 ?
		  vrg_uncond_10[31:0] :
		  IF_vrg_uncond_9_0_BITS_63_TO_32_1_EQ_rg_pc_cop_ETC___d132) ;
  assign IF_vrg_uncond_13_8_BITS_63_TO_32_9_EQ_rg_pc_co_ETC___d136 =
	     vrg_uncond_13_8_BITS_63_TO_32_9_EQ_rg_pc_copy___d50 ?
	       vrg_uncond_13[31:0] :
	       (vrg_uncond_12_1_BITS_63_TO_32_2_EQ_rg_pc_copy___d53 ?
		  vrg_uncond_12[31:0] :
		  IF_vrg_uncond_11_4_BITS_63_TO_32_5_EQ_rg_pc_co_ETC___d134) ;
  assign IF_vrg_uncond_15_2_BITS_63_TO_32_3_EQ_rg_pc_co_ETC___d138 =
	     vrg_uncond_15_2_BITS_63_TO_32_3_EQ_rg_pc_copy___d44 ?
	       vrg_uncond_15[31:0] :
	       (vrg_uncond_14_5_BITS_63_TO_32_6_EQ_rg_pc_copy___d47 ?
		  vrg_uncond_14[31:0] :
		  IF_vrg_uncond_13_8_BITS_63_TO_32_9_EQ_rg_pc_co_ETC___d136) ;
  assign IF_vrg_uncond_1_4_BITS_63_TO_32_5_EQ_rg_pc_cop_ETC___d124 =
	     vrg_uncond_1_4_BITS_63_TO_32_5_EQ_rg_pc_copy___d86 ?
	       vrg_uncond_1[31:0] :
	       (vrg_uncond_0_7_BITS_63_TO_32_8_EQ_rg_pc_copy___d89 ?
		  vrg_uncond_0[31:0] :
		  32'd0) ;
  assign IF_vrg_uncond_3_8_BITS_63_TO_32_9_EQ_rg_pc_cop_ETC___d126 =
	     vrg_uncond_3_8_BITS_63_TO_32_9_EQ_rg_pc_copy___d80 ?
	       vrg_uncond_3[31:0] :
	       (vrg_uncond_2_1_BITS_63_TO_32_2_EQ_rg_pc_copy___d83 ?
		  vrg_uncond_2[31:0] :
		  IF_vrg_uncond_1_4_BITS_63_TO_32_5_EQ_rg_pc_cop_ETC___d124) ;
  assign IF_vrg_uncond_5_2_BITS_63_TO_32_3_EQ_rg_pc_cop_ETC___d128 =
	     vrg_uncond_5_2_BITS_63_TO_32_3_EQ_rg_pc_copy___d74 ?
	       vrg_uncond_5[31:0] :
	       (vrg_uncond_4_5_BITS_63_TO_32_6_EQ_rg_pc_copy___d77 ?
		  vrg_uncond_4[31:0] :
		  IF_vrg_uncond_3_8_BITS_63_TO_32_9_EQ_rg_pc_cop_ETC___d126) ;
  assign IF_vrg_uncond_7_6_BITS_63_TO_32_7_EQ_rg_pc_cop_ETC___d130 =
	     vrg_uncond_7_6_BITS_63_TO_32_7_EQ_rg_pc_copy___d68 ?
	       vrg_uncond_7[31:0] :
	       (vrg_uncond_6_9_BITS_63_TO_32_0_EQ_rg_pc_copy___d71 ?
		  vrg_uncond_6[31:0] :
		  IF_vrg_uncond_5_2_BITS_63_TO_32_3_EQ_rg_pc_cop_ETC___d128) ;
  assign IF_vrg_uncond_9_0_BITS_63_TO_32_1_EQ_rg_pc_cop_ETC___d132 =
	     vrg_uncond_9_0_BITS_63_TO_32_1_EQ_rg_pc_copy___d62 ?
	       vrg_uncond_9[31:0] :
	       (vrg_uncond_8_3_BITS_63_TO_32_4_EQ_rg_pc_copy___d65 ?
		  vrg_uncond_8[31:0] :
		  IF_vrg_uncond_7_6_BITS_63_TO_32_7_EQ_rg_pc_cop_ETC___d130) ;
  assign NOT_vrg_uncond_12_1_BITS_63_TO_32_2_EQ_rg_pc_c_ETC___d189 =
	     !vrg_uncond_12_1_BITS_63_TO_32_2_EQ_rg_pc_copy___d53 &&
	     !vrg_uncond_11_4_BITS_63_TO_32_5_EQ_rg_pc_copy___d56 &&
	     !vrg_uncond_10_7_BITS_63_TO_32_8_EQ_rg_pc_copy___d59 &&
	     !vrg_uncond_9_0_BITS_63_TO_32_1_EQ_rg_pc_copy___d62 &&
	     !vrg_uncond_8_3_BITS_63_TO_32_4_EQ_rg_pc_copy___d65 &&
	     !vrg_uncond_7_6_BITS_63_TO_32_7_EQ_rg_pc_copy___d68 &&
	     NOT_vrg_uncond_6_9_BITS_63_TO_32_0_EQ_rg_pc_co_ETC___d183 ;
  assign NOT_vrg_uncond_6_9_BITS_63_TO_32_0_EQ_rg_pc_co_ETC___d183 =
	     !vrg_uncond_6_9_BITS_63_TO_32_0_EQ_rg_pc_copy___d71 &&
	     !vrg_uncond_5_2_BITS_63_TO_32_3_EQ_rg_pc_copy___d74 &&
	     !vrg_uncond_4_5_BITS_63_TO_32_6_EQ_rg_pc_copy___d77 &&
	     !vrg_uncond_3_8_BITS_63_TO_32_9_EQ_rg_pc_copy___d80 &&
	     !vrg_uncond_2_1_BITS_63_TO_32_2_EQ_rg_pc_copy___d83 &&
	     !vrg_uncond_1_4_BITS_63_TO_32_5_EQ_rg_pc_copy___d86 &&
	     !vrg_uncond_0_7_BITS_63_TO_32_8_EQ_rg_pc_copy___d89 ;
  assign bram_way_1DOA_BITS_12_TO_1__q1 = bram_way_1$DOA[12:1] ;
  assign bram_way_2DOA_BITS_12_TO_1__q2 = bram_way_2$DOA[12:1] ;
  assign bram_way_3DOA_BITS_12_TO_1__q3 = bram_way_3$DOA[12:1] ;
  assign bram_way_4DOA_BITS_12_TO_1__q4 = bram_way_4$DOA[12:1] ;
  assign lv_compare1__h2269 = bram_way_1$DOA[38:13] == rg_pc_copy[31:6] ;
  assign lv_compare2__h2270 = bram_way_2$DOA[38:13] == rg_pc_copy[31:6] ;
  assign lv_compare3__h2271 = bram_way_3$DOA[38:13] == rg_pc_copy[31:6] ;
  assign lv_compare4__h2272 = bram_way_4$DOA[38:13] == rg_pc_copy[31:6] ;
  assign mn_get_branch_pc__h6331 =
	     (vrg_uncond_16_9_BITS_63_TO_32_0_EQ_rg_pc_copy___d41 ||
	      vrg_uncond_15_2_BITS_63_TO_32_3_EQ_rg_pc_copy__ETC___d104) ?
	       new_value__h4257 :
	       new_value__h4278 ;
  assign new_value__h4257 =
	     vrg_uncond_16_9_BITS_63_TO_32_0_EQ_rg_pc_copy___d41 ?
	       vrg_uncond_16[31:0] :
	       IF_vrg_uncond_15_2_BITS_63_TO_32_3_EQ_rg_pc_co_ETC___d138 ;
  assign new_value__h4278 =
	     rg_pc_copy +
	     { {20{IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC__q5[11]}},
	       IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC__q5 } ;
  assign vrg_uncond_0_7_BITS_63_TO_32_8_EQ_rg_pc_copy___d89 =
	     vrg_uncond_0[63:32] == rg_pc_copy ;
  assign vrg_uncond_10_7_BITS_63_TO_32_8_EQ_rg_pc_copy___d59 =
	     vrg_uncond_10[63:32] == rg_pc_copy ;
  assign vrg_uncond_11_4_BITS_63_TO_32_5_EQ_rg_pc_copy___d56 =
	     vrg_uncond_11[63:32] == rg_pc_copy ;
  assign vrg_uncond_12_1_BITS_63_TO_32_2_EQ_rg_pc_copy__ETC___d101 =
	     vrg_uncond_12_1_BITS_63_TO_32_2_EQ_rg_pc_copy___d53 ||
	     vrg_uncond_11_4_BITS_63_TO_32_5_EQ_rg_pc_copy___d56 ||
	     vrg_uncond_10_7_BITS_63_TO_32_8_EQ_rg_pc_copy___d59 ||
	     vrg_uncond_9_0_BITS_63_TO_32_1_EQ_rg_pc_copy___d62 ||
	     vrg_uncond_8_3_BITS_63_TO_32_4_EQ_rg_pc_copy___d65 ||
	     vrg_uncond_7_6_BITS_63_TO_32_7_EQ_rg_pc_copy___d68 ||
	     vrg_uncond_6_9_BITS_63_TO_32_0_EQ_rg_pc_copy_1_ETC___d95 ;
  assign vrg_uncond_12_1_BITS_63_TO_32_2_EQ_rg_pc_copy___d53 =
	     vrg_uncond_12[63:32] == rg_pc_copy ;
  assign vrg_uncond_13_8_BITS_63_TO_32_9_EQ_rg_pc_copy___d50 =
	     vrg_uncond_13[63:32] == rg_pc_copy ;
  assign vrg_uncond_14_5_BITS_63_TO_32_6_EQ_rg_pc_copy___d47 =
	     vrg_uncond_14[63:32] == rg_pc_copy ;
  assign vrg_uncond_15_2_BITS_63_TO_32_3_EQ_rg_pc_copy__ETC___d104 =
	     vrg_uncond_15_2_BITS_63_TO_32_3_EQ_rg_pc_copy___d44 ||
	     vrg_uncond_14_5_BITS_63_TO_32_6_EQ_rg_pc_copy___d47 ||
	     vrg_uncond_13_8_BITS_63_TO_32_9_EQ_rg_pc_copy___d50 ||
	     vrg_uncond_12_1_BITS_63_TO_32_2_EQ_rg_pc_copy__ETC___d101 ;
  assign vrg_uncond_15_2_BITS_63_TO_32_3_EQ_rg_pc_copy___d44 =
	     vrg_uncond_15[63:32] == rg_pc_copy ;
  assign vrg_uncond_16_9_BITS_63_TO_32_0_EQ_rg_pc_copy___d41 =
	     vrg_uncond_16[63:32] == rg_pc_copy ;
  assign vrg_uncond_1_4_BITS_63_TO_32_5_EQ_rg_pc_copy___d86 =
	     vrg_uncond_1[63:32] == rg_pc_copy ;
  assign vrg_uncond_2_1_BITS_63_TO_32_2_EQ_rg_pc_copy___d83 =
	     vrg_uncond_2[63:32] == rg_pc_copy ;
  assign vrg_uncond_3_8_BITS_63_TO_32_9_EQ_rg_pc_copy___d80 =
	     vrg_uncond_3[63:32] == rg_pc_copy ;
  assign vrg_uncond_4_5_BITS_63_TO_32_6_EQ_rg_pc_copy___d77 =
	     vrg_uncond_4[63:32] == rg_pc_copy ;
  assign vrg_uncond_5_2_BITS_63_TO_32_3_EQ_rg_pc_copy___d74 =
	     vrg_uncond_5[63:32] == rg_pc_copy ;
  assign vrg_uncond_6_9_BITS_63_TO_32_0_EQ_rg_pc_copy_1_ETC___d95 =
	     vrg_uncond_6_9_BITS_63_TO_32_0_EQ_rg_pc_copy___d71 ||
	     vrg_uncond_5_2_BITS_63_TO_32_3_EQ_rg_pc_copy___d74 ||
	     vrg_uncond_4_5_BITS_63_TO_32_6_EQ_rg_pc_copy___d77 ||
	     vrg_uncond_3_8_BITS_63_TO_32_9_EQ_rg_pc_copy___d80 ||
	     vrg_uncond_2_1_BITS_63_TO_32_2_EQ_rg_pc_copy___d83 ||
	     vrg_uncond_1_4_BITS_63_TO_32_5_EQ_rg_pc_copy___d86 ||
	     vrg_uncond_0_7_BITS_63_TO_32_8_EQ_rg_pc_copy___d89 ;
  assign vrg_uncond_6_9_BITS_63_TO_32_0_EQ_rg_pc_copy___d71 =
	     vrg_uncond_6[63:32] == rg_pc_copy ;
  assign vrg_uncond_7_6_BITS_63_TO_32_7_EQ_rg_pc_copy___d68 =
	     vrg_uncond_7[63:32] == rg_pc_copy ;
  assign vrg_uncond_8_3_BITS_63_TO_32_4_EQ_rg_pc_copy___d65 =
	     vrg_uncond_8[63:32] == rg_pc_copy ;
  assign vrg_uncond_9_0_BITS_63_TO_32_1_EQ_rg_pc_copy___d62 =
	     vrg_uncond_9[63:32] == rg_pc_copy ;
  assign x__h2286 =
	     { lv_compare1__h2269,
	       lv_compare2__h2270,
	       lv_compare3__h2271,
	       lv_compare4__h2272 } ;
  assign x__h7119 = rg_rr_counter + 5'd1 ;
  assign y_avValue_snd__h2629 =
	     { {20{bram_way_1DOA_BITS_12_TO_1__q1[11]}},
	       bram_way_1DOA_BITS_12_TO_1__q1 } ;
  assign y_avValue_snd__h2743 =
	     { {20{bram_way_2DOA_BITS_12_TO_1__q2[11]}},
	       bram_way_2DOA_BITS_12_TO_1__q2 } ;
  assign y_avValue_snd__h2857 =
	     { {20{bram_way_3DOA_BITS_12_TO_1__q3[11]}},
	       bram_way_3DOA_BITS_12_TO_1__q3 } ;
  assign y_avValue_snd__h2971 =
	     { {20{bram_way_4DOA_BITS_12_TO_1__q4[11]}},
	       bram_way_4DOA_BITS_12_TO_1__q4 } ;
  assign y_avValue_snd__h3036 =
	     bram_way_1$DOA[0] ? y_avValue_snd__h2629 : 32'd0 ;
  assign y_avValue_snd__h3041 =
	     bram_way_2$DOA[0] ? y_avValue_snd__h2743 : 32'd0 ;
  assign y_avValue_snd__h3046 =
	     bram_way_3$DOA[0] ? y_avValue_snd__h2857 : 32'd0 ;
  assign y_avValue_snd__h3051 =
	     bram_way_4$DOA[0] ? y_avValue_snd__h2971 : 32'd0 ;
  always@(x__h2286 or bram_replacement$DOA)
  begin
    case (x__h2286)
      4'b0001: mn_get_way_num__h6330 = 2'd3;
      4'b0010: mn_get_way_num__h6330 = 2'd2;
      4'b0100: mn_get_way_num__h6330 = 2'd1;
      4'b1000: mn_get_way_num__h6330 = 2'd0;
      default: mn_get_way_num__h6330 = bram_replacement$DOA;
    endcase
  end
  always@(x__h2286 or
	  y_avValue_snd__h3051 or
	  y_avValue_snd__h3046 or
	  y_avValue_snd__h3041 or y_avValue_snd__h3036)
  begin
    case (x__h2286)
      4'b0001:
	  IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC___d156 =
	      y_avValue_snd__h3051;
      4'b0010:
	  IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC___d156 =
	      y_avValue_snd__h3046;
      4'b0100:
	  IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC___d156 =
	      y_avValue_snd__h3041;
      4'b1000:
	  IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC___d156 =
	      y_avValue_snd__h3036;
      default: IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC___d156 =
		   32'd0;
    endcase
  end
  always@(x__h2286 or
	  bram_way_4$DOA or
	  bram_way_3$DOA or bram_way_2$DOA or bram_way_1$DOA)
  begin
    case (x__h2286)
      4'b0010:
	  IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC___d197 =
	      bram_way_3$DOA[0];
      4'b0100:
	  IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC___d197 =
	      bram_way_2$DOA[0];
      4'b1000:
	  IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC___d197 =
	      bram_way_1$DOA[0];
      default: IF_bram_way_1_a_read_BITS_38_TO_13_EQ_rg_pc_co_ETC___d197 =
		   x__h2286 == 4'b0001 && bram_way_4$DOA[0];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_flush <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_flush_addr <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_pc_copy <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_rr_counter <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (rg_flush$EN) rg_flush <= `BSV_ASSIGNMENT_DELAY rg_flush$D_IN;
	if (rg_flush_addr$EN)
	  rg_flush_addr <= `BSV_ASSIGNMENT_DELAY rg_flush_addr$D_IN;
	if (rg_pc_copy$EN)
	  rg_pc_copy <= `BSV_ASSIGNMENT_DELAY rg_pc_copy$D_IN;
	if (rg_rr_counter$EN)
	  rg_rr_counter <= `BSV_ASSIGNMENT_DELAY rg_rr_counter$D_IN;
      end
    if (vrg_uncond_0$EN)
      vrg_uncond_0 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_0$D_IN;
    if (vrg_uncond_1$EN)
      vrg_uncond_1 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_1$D_IN;
    if (vrg_uncond_10$EN)
      vrg_uncond_10 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_10$D_IN;
    if (vrg_uncond_11$EN)
      vrg_uncond_11 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_11$D_IN;
    if (vrg_uncond_12$EN)
      vrg_uncond_12 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_12$D_IN;
    if (vrg_uncond_13$EN)
      vrg_uncond_13 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_13$D_IN;
    if (vrg_uncond_14$EN)
      vrg_uncond_14 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_14$D_IN;
    if (vrg_uncond_15$EN)
      vrg_uncond_15 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_15$D_IN;
    if (vrg_uncond_16$EN)
      vrg_uncond_16 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_16$D_IN;
    if (vrg_uncond_2$EN)
      vrg_uncond_2 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_2$D_IN;
    if (vrg_uncond_3$EN)
      vrg_uncond_3 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_3$D_IN;
    if (vrg_uncond_4$EN)
      vrg_uncond_4 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_4$D_IN;
    if (vrg_uncond_5$EN)
      vrg_uncond_5 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_5$D_IN;
    if (vrg_uncond_6$EN)
      vrg_uncond_6 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_6$D_IN;
    if (vrg_uncond_7$EN)
      vrg_uncond_7 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_7$D_IN;
    if (vrg_uncond_8$EN)
      vrg_uncond_8 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_8$D_IN;
    if (vrg_uncond_9$EN)
      vrg_uncond_9 <= `BSV_ASSIGNMENT_DELAY vrg_uncond_9$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_flush = 1'h0;
    rg_flush_addr = 5'h0A;
    rg_pc_copy = 32'hAAAAAAAA;
    rg_rr_counter = 5'h0A;
    vrg_uncond_0 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_1 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_10 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_11 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_12 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_13 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_14 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_15 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_16 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_2 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_3 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_4 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_5 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_6 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_7 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_8 = 64'hAAAAAAAAAAAAAAAA;
    vrg_uncond_9 = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkbtb

