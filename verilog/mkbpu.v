//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Mon Jul  9 22:30:32 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_send_prediction_request_put  O     1
// prediction_response_get        O   108
// RDY_prediction_response_get    O     1
// RDY_ma_flush                   O     1
// RDY_ma_training                O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// send_prediction_request_put    I    42
// ma_training_training_data      I   126
// EN_send_prediction_request_put  I     1
// EN_ma_flush                    I     1
// EN_ma_training                 I     1
// EN_prediction_response_get     I     1
//
// Combinational paths from inputs to outputs:
//   EN_prediction_response_get -> RDY_send_prediction_request_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkbpu(CLK,
	     RST_N,

	     send_prediction_request_put,
	     EN_send_prediction_request_put,
	     RDY_send_prediction_request_put,

	     EN_prediction_response_get,
	     prediction_response_get,
	     RDY_prediction_response_get,

	     EN_ma_flush,
	     RDY_ma_flush,

	     ma_training_training_data,
	     EN_ma_training,
	     RDY_ma_training);
  input  CLK;
  input  RST_N;

  // action method send_prediction_request_put
  input  [41 : 0] send_prediction_request_put;
  input  EN_send_prediction_request_put;
  output RDY_send_prediction_request_put;

  // actionvalue method prediction_response_get
  input  EN_prediction_response_get;
  output [107 : 0] prediction_response_get;
  output RDY_prediction_response_get;

  // action method ma_flush
  input  EN_ma_flush;
  output RDY_ma_flush;

  // action method ma_training
  input  [125 : 0] ma_training_training_data;
  input  EN_ma_training;
  output RDY_ma_training;

  // signals for module outputs
  wire [107 : 0] prediction_response_get;
  wire RDY_ma_flush,
       RDY_ma_training,
       RDY_prediction_response_get,
       RDY_send_prediction_request_put;

  // register dump
  reg [31 : 0] dump;
  wire [31 : 0] dump$D_IN;
  wire dump$EN;

  // register dump2
  reg [31 : 0] dump2;
  wire [31 : 0] dump2$D_IN;
  wire dump2$EN;

  // register dump3
  reg [31 : 0] dump3;
  wire [31 : 0] dump3$D_IN;
  wire dump3$EN;

  // register dump4
  reg [31 : 0] dump4;
  wire [31 : 0] dump4$D_IN;
  wire dump4$EN;

  // register dump5
  reg [31 : 0] dump5;
  wire [31 : 0] dump5$D_IN;
  wire dump5$EN;

  // register file_open
  reg file_open;
  wire file_open$D_IN, file_open$EN;

  // register rg_count_hit
  reg [31 : 0] rg_count_hit;
  wire [31 : 0] rg_count_hit$D_IN;
  wire rg_count_hit$EN;

  // register rg_count_mispred
  reg [31 : 0] rg_count_mispred;
  wire [31 : 0] rg_count_mispred$D_IN;
  wire rg_count_mispred$EN;

  // register rg_count_miss
  reg [31 : 0] rg_count_miss;
  wire [31 : 0] rg_count_miss$D_IN;
  wire rg_count_miss$EN;

  // ports of submodule btb
  wire [66 : 0] btb$ma_update_update_val;
  wire [35 : 0] btb$mn_get;
  wire [31 : 0] btb$ma_put_pc;
  wire btb$EN_ma_flush,
       btb$EN_ma_put,
       btb$EN_ma_update,
       btb$RDY_ma_flush,
       btb$RDY_ma_update,
       btb$RDY_mn_get;

  // ports of submodule capture_prediction_request
  wire [41 : 0] capture_prediction_request$D_IN,
		capture_prediction_request$D_OUT;
  wire capture_prediction_request$CLR,
       capture_prediction_request$DEQ,
       capture_prediction_request$EMPTY_N,
       capture_prediction_request$ENQ,
       capture_prediction_request$FULL_N;

  // ports of submodule tage_predictor
  wire [56 : 0] tage_predictor$ma_train_training_data;
  wire [31 : 0] tage_predictor$ma_put_pc;
  wire [22 : 0] tage_predictor$mn_get;
  wire tage_predictor$EN_ma_flush,
       tage_predictor$EN_ma_put,
       tage_predictor$EN_ma_shadow,
       tage_predictor$EN_ma_train,
       tage_predictor$EN_mn_get,
       tage_predictor$RDY_ma_flush,
       tage_predictor$RDY_ma_train,
       tage_predictor$ma_shadow_prediction;

  // remaining internal signals
  reg [63 : 0] v__h1250, v__h1496;
  reg [31 : 0] TASK_fopen___d2,
	       TASK_fopen___d3,
	       TASK_fopen___d4,
	       TASK_fopen___d5,
	       TASK_fopen___d6;
  wire [38 : 0] x__h1811;

  // action method send_prediction_request_put
  assign RDY_send_prediction_request_put = capture_prediction_request$FULL_N ;

  // actionvalue method prediction_response_get
  assign prediction_response_get =
	     { capture_prediction_request$D_OUT,
	       x__h1811,
	       (btb$mn_get[35] || btb$mn_get[34]) &&
	       (!btb$mn_get[35] || tage_predictor$mn_get[22]),
	       tage_predictor$mn_get,
	       btb$mn_get[35] || btb$mn_get[34],
	       btb$mn_get[33:32] } ;
  assign RDY_prediction_response_get =
	     btb$RDY_mn_get && capture_prediction_request$EMPTY_N ;

  // action method ma_flush
  assign RDY_ma_flush = btb$RDY_ma_flush && tage_predictor$RDY_ma_flush ;

  // action method ma_training
  assign RDY_ma_training = btb$RDY_ma_update && tage_predictor$RDY_ma_train ;

  // submodule btb
  mkbtb btb(.CLK(CLK),
	    .RST_N(RST_N),
	    .ma_put_pc(btb$ma_put_pc),
	    .ma_update_update_val(btb$ma_update_update_val),
	    .EN_ma_put(btb$EN_ma_put),
	    .EN_ma_update(btb$EN_ma_update),
	    .EN_ma_flush(btb$EN_ma_flush),
	    .RDY_ma_put(),
	    .mn_get(btb$mn_get),
	    .RDY_mn_get(btb$RDY_mn_get),
	    .RDY_ma_update(btb$RDY_ma_update),
	    .RDY_ma_flush(btb$RDY_ma_flush));

  // submodule capture_prediction_request
  FIFOL1 #(.width(32'd42)) capture_prediction_request(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(capture_prediction_request$D_IN),
						      .ENQ(capture_prediction_request$ENQ),
						      .DEQ(capture_prediction_request$DEQ),
						      .CLR(capture_prediction_request$CLR),
						      .D_OUT(capture_prediction_request$D_OUT),
						      .FULL_N(capture_prediction_request$FULL_N),
						      .EMPTY_N(capture_prediction_request$EMPTY_N));

  // submodule tage_predictor
  mkbranch tage_predictor(.CLK(CLK),
			  .RST_N(RST_N),
			  .ma_put_pc(tage_predictor$ma_put_pc),
			  .ma_shadow_prediction(tage_predictor$ma_shadow_prediction),
			  .ma_train_training_data(tage_predictor$ma_train_training_data),
			  .EN_ma_put(tage_predictor$EN_ma_put),
			  .EN_mn_get(tage_predictor$EN_mn_get),
			  .EN_ma_train(tage_predictor$EN_ma_train),
			  .EN_ma_shadow(tage_predictor$EN_ma_shadow),
			  .EN_ma_flush(tage_predictor$EN_ma_flush),
			  .RDY_ma_put(),
			  .mn_get(tage_predictor$mn_get),
			  .RDY_mn_get(),
			  .RDY_ma_train(tage_predictor$RDY_ma_train),
			  .RDY_ma_shadow(),
			  .RDY_ma_flush(tage_predictor$RDY_ma_flush));

  // register dump
  assign dump$D_IN = TASK_fopen___d6 ;
  assign dump$EN = file_open ;

  // register dump2
  assign dump2$D_IN = TASK_fopen___d5 ;
  assign dump2$EN = file_open ;

  // register dump3
  assign dump3$D_IN = TASK_fopen___d4 ;
  assign dump3$EN = file_open ;

  // register dump4
  assign dump4$D_IN = TASK_fopen___d3 ;
  assign dump4$EN = file_open ;

  // register dump5
  assign dump5$D_IN = TASK_fopen___d2 ;
  assign dump5$EN = file_open ;

  // register file_open
  assign file_open$D_IN = 1'd0 ;
  assign file_open$EN = file_open ;

  // register rg_count_hit
  assign rg_count_hit$D_IN = rg_count_hit + 32'd1 ;
  assign rg_count_hit$EN =
	     EN_ma_training && ma_training_training_data[125] &&
	     ma_training_training_data[124] ;

  // register rg_count_mispred
  assign rg_count_mispred$D_IN = rg_count_mispred + 32'd1 ;
  assign rg_count_mispred$EN =
	     EN_ma_training && ma_training_training_data[125] &&
	     ma_training_training_data[66] &&
	     (ma_training_training_data[124] ?
		!ma_training_training_data[90] :
		!(ma_training_training_data[90] ^
		  ma_training_training_data[89])) ;

  // register rg_count_miss
  assign rg_count_miss$D_IN = rg_count_miss + 32'd1 ;
  assign rg_count_miss$EN =
	     EN_ma_training && ma_training_training_data[125] &&
	     ma_training_training_data[66] &&
	     !ma_training_training_data[124] ;

  // submodule btb
  assign btb$ma_put_pc = send_prediction_request_put[31:0] ;
  assign btb$ma_update_update_val = ma_training_training_data[66:0] ;
  assign btb$EN_ma_put = EN_send_prediction_request_put ;
  assign btb$EN_ma_update =
	     EN_ma_training && ma_training_training_data[125] &&
	     !ma_training_training_data[124] ;
  assign btb$EN_ma_flush = EN_ma_flush ;

  // submodule capture_prediction_request
  assign capture_prediction_request$D_IN = send_prediction_request_put ;
  assign capture_prediction_request$ENQ = EN_send_prediction_request_put ;
  assign capture_prediction_request$DEQ = EN_prediction_response_get ;
  assign capture_prediction_request$CLR = 1'b0 ;

  // submodule tage_predictor
  assign tage_predictor$ma_put_pc = send_prediction_request_put[31:0] ;
  assign tage_predictor$ma_shadow_prediction = tage_predictor$mn_get[22] ;
  assign tage_predictor$ma_train_training_data =
	     { ma_training_training_data[123:92],
	       ma_training_training_data[124],
	       ma_training_training_data[124] ?
		 ma_training_training_data[90:67] :
		 (ma_training_training_data[90] ?
		    (ma_training_training_data[89] ?
		       { 1'd0, ma_training_training_data[89:67] } :
		       ma_training_training_data[90:67]) :
		    (ma_training_training_data[89] ?
		       { 1'd1, ma_training_training_data[89:67] } :
		       ma_training_training_data[90:67])) } ;
  assign tage_predictor$EN_ma_put = EN_send_prediction_request_put ;
  assign tage_predictor$EN_mn_get = EN_prediction_response_get ;
  assign tage_predictor$EN_ma_train =
	     EN_ma_training && ma_training_training_data[125] &&
	     ma_training_training_data[66] ;
  assign tage_predictor$EN_ma_shadow =
	     EN_prediction_response_get && btb$mn_get[35] ;
  assign tage_predictor$EN_ma_flush = EN_ma_flush ;

  // remaining internal signals
  assign x__h1811 = { 7'd0, btb$mn_get[31:0] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dump <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dump2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dump3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dump4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dump5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	file_open <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_count_hit <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_count_mispred <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_count_miss <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (dump$EN) dump <= `BSV_ASSIGNMENT_DELAY dump$D_IN;
	if (dump2$EN) dump2 <= `BSV_ASSIGNMENT_DELAY dump2$D_IN;
	if (dump3$EN) dump3 <= `BSV_ASSIGNMENT_DELAY dump3$D_IN;
	if (dump4$EN) dump4 <= `BSV_ASSIGNMENT_DELAY dump4$D_IN;
	if (dump5$EN) dump5 <= `BSV_ASSIGNMENT_DELAY dump5$D_IN;
	if (file_open$EN) file_open <= `BSV_ASSIGNMENT_DELAY file_open$D_IN;
	if (rg_count_hit$EN)
	  rg_count_hit <= `BSV_ASSIGNMENT_DELAY rg_count_hit$D_IN;
	if (rg_count_mispred$EN)
	  rg_count_mispred <= `BSV_ASSIGNMENT_DELAY rg_count_mispred$D_IN;
	if (rg_count_miss$EN)
	  rg_count_miss <= `BSV_ASSIGNMENT_DELAY rg_count_miss$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dump = 32'hAAAAAAAA;
    dump2 = 32'hAAAAAAAA;
    dump3 = 32'hAAAAAAAA;
    dump4 = 32'hAAAAAAAA;
    dump5 = 32'hAAAAAAAA;
    file_open = 1'h0;
    rg_count_hit = 32'hAAAAAAAA;
    rg_count_mispred = 32'hAAAAAAAA;
    rg_count_miss = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_prediction_response_get)
	begin
	  v__h1496 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_prediction_response_get)
	$display(v__h1496,
		 "\tBPU: Prediction response for Address: %h",
		 capture_prediction_request$D_OUT[38:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_prediction_response_get)
	$fwrite(dump5,
		"%0d",
		(btb$mn_get[35] || btb$mn_get[34]) &&
		(!btb$mn_get[35] || tage_predictor$mn_get[22]),
		"\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_send_prediction_request_put)
	begin
	  v__h1250 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_send_prediction_request_put)
	$display(v__h1250,
		 "\tBPU: Prediction Request for Address: %h",
		 send_prediction_request_put[38:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_training && ma_training_training_data[125])
	$fwrite(dump4,
		"%0d:%0d:%h:%h:%0d:%0d",
		ma_training_training_data[66],
		ma_training_training_data[124],
		ma_training_training_data[65:34],
		ma_training_training_data[33:2],
		ma_training_training_data[89],
		ma_training_training_data[90],
		"\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_training && ma_training_training_data[125] &&
	  ma_training_training_data[66] &&
	  ma_training_training_data[124])
	$fwrite(dump3, "%0d", rg_count_hit, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_training && ma_training_training_data[125] &&
	  ma_training_training_data[66] &&
	  !ma_training_training_data[124])
	$fwrite(dump2, "%0d", rg_count_miss, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_training && ma_training_training_data[125] &&
	  ma_training_training_data[66] &&
	  (ma_training_training_data[124] ?
	     !ma_training_training_data[90] :
	     !(ma_training_training_data[90] ^
	       ma_training_training_data[89])))
	$fwrite(dump, "%0d", rg_count_mispred, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_training && ma_training_training_data[125] &&
	  !ma_training_training_data[66] &&
	  ma_training_training_data[124])
	$fwrite(dump3, "%0d", rg_count_hit, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (file_open)
	begin
	  TASK_fopen___d6 = $fopen("final_mispred.dump", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (file_open)
	begin
	  TASK_fopen___d5 = $fopen("final_miss.dump", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (file_open)
	begin
	  TASK_fopen___d4 = $fopen("final_hit.dump", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (file_open)
	begin
	  TASK_fopen___d3 = $fopen("final_trace.dump", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (file_open)
	begin
	  TASK_fopen___d2 = $fopen("final_pred.dump", "w");
	  #0;
	end
  end
  // synopsys translate_on
endmodule  // mkbpu

