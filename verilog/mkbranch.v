//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Mon Jul  9 22:25:27 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_put                     O     1 const
// mn_get                         O    23
// RDY_mn_get                     O     1 const
// RDY_ma_train                   O     1
// RDY_ma_shadow                  O     1 const
// RDY_ma_flush                   O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_put_pc                      I    32
// ma_train_training_data         I    57
// ma_shadow_prediction           I     1
// EN_ma_put                      I     1
// EN_ma_train                    I     1
// EN_ma_shadow                   I     1
// EN_ma_flush                    I     1
// EN_mn_get                      I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkbranch(CLK,
		RST_N,

		ma_put_pc,
		EN_ma_put,
		RDY_ma_put,

		EN_mn_get,
		mn_get,
		RDY_mn_get,

		ma_train_training_data,
		EN_ma_train,
		RDY_ma_train,

		ma_shadow_prediction,
		EN_ma_shadow,
		RDY_ma_shadow,

		EN_ma_flush,
		RDY_ma_flush);
  input  CLK;
  input  RST_N;

  // action method ma_put
  input  [31 : 0] ma_put_pc;
  input  EN_ma_put;
  output RDY_ma_put;

  // actionvalue method mn_get
  input  EN_mn_get;
  output [22 : 0] mn_get;
  output RDY_mn_get;

  // action method ma_train
  input  [56 : 0] ma_train_training_data;
  input  EN_ma_train;
  output RDY_ma_train;

  // action method ma_shadow
  input  ma_shadow_prediction;
  input  EN_ma_shadow;
  output RDY_ma_shadow;

  // action method ma_flush
  input  EN_ma_flush;
  output RDY_ma_flush;

  // signals for module outputs
  wire [22 : 0] mn_get;
  wire RDY_ma_flush, RDY_ma_put, RDY_ma_shadow, RDY_ma_train, RDY_mn_get;

  // inlined wires
  reg [15 : 0] crg_bank2_csr_indx$port1__write_1,
	       crg_bank3_csr_indx$port1__write_1,
	       crg_bank4_csr_indx$port1__write_1;
  reg [13 : 0] crg_bank1_csr_p$port1__write_1,
	       crg_bank2_csr_p$port1__write_1,
	       crg_bank3_csr_p$port1__write_1,
	       crg_bank4_csr_p$port1__write_1;
  reg [12 : 0] crg_bank1_csr_s$port1__write_1,
	       crg_bank2_csr_s$port1__write_1,
	       crg_bank3_csr_s$port1__write_1,
	       crg_bank4_csr_s$port1__write_1;
  wire [15 : 0] crg_bank2_csr_indx$port0__write_1,
		crg_bank2_csr_indx$port1__read,
		crg_bank2_csr_indx$port2__read,
		crg_bank3_csr_indx$port0__write_1,
		crg_bank3_csr_indx$port1__read,
		crg_bank3_csr_indx$port2__read,
		crg_bank4_csr_indx$port0__write_1,
		crg_bank4_csr_indx$port1__read,
		crg_bank4_csr_indx$port2__read;
  wire [13 : 0] crg_bank1_csr_p$port0__write_1,
		crg_bank1_csr_p$port1__read,
		crg_bank1_csr_p$port2__read,
		crg_bank2_csr_p$port0__write_1,
		crg_bank2_csr_p$port1__read,
		crg_bank2_csr_p$port2__read,
		crg_bank3_csr_p$port0__write_1,
		crg_bank3_csr_p$port1__read,
		crg_bank3_csr_p$port2__read,
		crg_bank4_csr_p$port0__write_1,
		crg_bank4_csr_p$port1__read,
		crg_bank4_csr_p$port2__read;
  wire [12 : 0] crg_bank1_csr_s$port0__write_1,
		crg_bank1_csr_s$port1__read,
		crg_bank1_csr_s$port2__read,
		crg_bank2_csr_s$port0__write_1,
		crg_bank2_csr_s$port1__read,
		crg_bank2_csr_s$port2__read,
		crg_bank3_csr_s$port0__write_1,
		crg_bank3_csr_s$port1__read,
		crg_bank3_csr_s$port2__read,
		crg_bank4_csr_s$port0__write_1,
		crg_bank4_csr_s$port1__read,
		crg_bank4_csr_s$port2__read;
  wire [10 : 0] crg_hist$port0__write_1,
		crg_hist$port1__read,
		crg_hist$port1__write_1,
		crg_hist$port2__read;
  wire [2 : 0] crg_inflight$port0__write_1,
	       crg_inflight$port1__write_1,
	       crg_inflight$port2__read;
  wire crg_bank1_csr_p$EN_port1__write,
       crg_bank1_csr_s$EN_port1__write,
       crg_bank2_csr_indx$EN_port1__write,
       crg_bank2_csr_p$EN_port1__write,
       crg_bank2_csr_s$EN_port1__write,
       crg_bank3_csr_indx$EN_port1__write,
       crg_bank3_csr_p$EN_port1__write,
       crg_bank3_csr_s$EN_port1__write,
       crg_bank4_csr_indx$EN_port1__write,
       crg_bank4_csr_p$EN_port1__write,
       crg_bank4_csr_s$EN_port1__write,
       crg_hist$EN_port1__write,
       crg_inflight$EN_port1__write;

  // register crg_bank1_csr_p
  reg [13 : 0] crg_bank1_csr_p;
  wire [13 : 0] crg_bank1_csr_p$D_IN;
  wire crg_bank1_csr_p$EN;

  // register crg_bank1_csr_s
  reg [12 : 0] crg_bank1_csr_s;
  wire [12 : 0] crg_bank1_csr_s$D_IN;
  wire crg_bank1_csr_s$EN;

  // register crg_bank2_csr_indx
  reg [15 : 0] crg_bank2_csr_indx;
  wire [15 : 0] crg_bank2_csr_indx$D_IN;
  wire crg_bank2_csr_indx$EN;

  // register crg_bank2_csr_p
  reg [13 : 0] crg_bank2_csr_p;
  wire [13 : 0] crg_bank2_csr_p$D_IN;
  wire crg_bank2_csr_p$EN;

  // register crg_bank2_csr_s
  reg [12 : 0] crg_bank2_csr_s;
  wire [12 : 0] crg_bank2_csr_s$D_IN;
  wire crg_bank2_csr_s$EN;

  // register crg_bank3_csr_indx
  reg [15 : 0] crg_bank3_csr_indx;
  wire [15 : 0] crg_bank3_csr_indx$D_IN;
  wire crg_bank3_csr_indx$EN;

  // register crg_bank3_csr_p
  reg [13 : 0] crg_bank3_csr_p;
  wire [13 : 0] crg_bank3_csr_p$D_IN;
  wire crg_bank3_csr_p$EN;

  // register crg_bank3_csr_s
  reg [12 : 0] crg_bank3_csr_s;
  wire [12 : 0] crg_bank3_csr_s$D_IN;
  wire crg_bank3_csr_s$EN;

  // register crg_bank4_csr_indx
  reg [15 : 0] crg_bank4_csr_indx;
  wire [15 : 0] crg_bank4_csr_indx$D_IN;
  wire crg_bank4_csr_indx$EN;

  // register crg_bank4_csr_p
  reg [13 : 0] crg_bank4_csr_p;
  wire [13 : 0] crg_bank4_csr_p$D_IN;
  wire crg_bank4_csr_p$EN;

  // register crg_bank4_csr_s
  reg [12 : 0] crg_bank4_csr_s;
  wire [12 : 0] crg_bank4_csr_s$D_IN;
  wire crg_bank4_csr_s$EN;

  // register crg_hist
  reg [10 : 0] crg_hist;
  wire [10 : 0] crg_hist$D_IN;
  wire crg_hist$EN;

  // register crg_inflight
  reg [2 : 0] crg_inflight;
  wire [2 : 0] crg_inflight$D_IN;
  wire crg_inflight$EN;

  // register dump1
  reg [31 : 0] dump1;
  wire [31 : 0] dump1$D_IN;
  wire dump1$EN;

  // register dump2
  reg [31 : 0] dump2;
  wire [31 : 0] dump2$D_IN;
  wire dump2$EN;

  // register dump3
  reg [31 : 0] dump3;
  wire [31 : 0] dump3$D_IN;
  wire dump3$EN;

  // register file_open
  reg file_open;
  wire file_open$D_IN, file_open$EN;

  // register random_bank0_initialized
  reg random_bank0_initialized;
  wire random_bank0_initialized$D_IN, random_bank0_initialized$EN;

  // register random_bank1_initialized
  reg random_bank1_initialized;
  wire random_bank1_initialized$D_IN, random_bank1_initialized$EN;

  // register random_bank2_initialized
  reg random_bank2_initialized;
  wire random_bank2_initialized$D_IN, random_bank2_initialized$EN;

  // register rg_bank1_csr_p
  reg [7 : 0] rg_bank1_csr_p;
  wire [7 : 0] rg_bank1_csr_p$D_IN;
  wire rg_bank1_csr_p$EN;

  // register rg_bank1_csr_s
  reg [6 : 0] rg_bank1_csr_s;
  wire [6 : 0] rg_bank1_csr_s$D_IN;
  wire rg_bank1_csr_s$EN;

  // register rg_bank2_csr_indx
  reg [9 : 0] rg_bank2_csr_indx;
  wire [9 : 0] rg_bank2_csr_indx$D_IN;
  wire rg_bank2_csr_indx$EN;

  // register rg_bank2_csr_p
  reg [7 : 0] rg_bank2_csr_p;
  wire [7 : 0] rg_bank2_csr_p$D_IN;
  wire rg_bank2_csr_p$EN;

  // register rg_bank2_csr_s
  reg [6 : 0] rg_bank2_csr_s;
  wire [6 : 0] rg_bank2_csr_s$D_IN;
  wire rg_bank2_csr_s$EN;

  // register rg_bank3_csr_indx
  reg [9 : 0] rg_bank3_csr_indx;
  wire [9 : 0] rg_bank3_csr_indx$D_IN;
  wire rg_bank3_csr_indx$EN;

  // register rg_bank3_csr_p
  reg [7 : 0] rg_bank3_csr_p;
  wire [7 : 0] rg_bank3_csr_p$D_IN;
  wire rg_bank3_csr_p$EN;

  // register rg_bank3_csr_s
  reg [6 : 0] rg_bank3_csr_s;
  wire [6 : 0] rg_bank3_csr_s$D_IN;
  wire rg_bank3_csr_s$EN;

  // register rg_bank4_csr_indx
  reg [9 : 0] rg_bank4_csr_indx;
  wire [9 : 0] rg_bank4_csr_indx$D_IN;
  wire rg_bank4_csr_indx$EN;

  // register rg_bank4_csr_p
  reg [7 : 0] rg_bank4_csr_p;
  wire [7 : 0] rg_bank4_csr_p$D_IN;
  wire rg_bank4_csr_p$EN;

  // register rg_bank4_csr_s
  reg [6 : 0] rg_bank4_csr_s;
  wire [6 : 0] rg_bank4_csr_s$D_IN;
  wire rg_bank4_csr_s$EN;

  // register rg_bimodal_flush_addr
  reg [12 : 0] rg_bimodal_flush_addr;
  wire [12 : 0] rg_bimodal_flush_addr$D_IN;
  wire rg_bimodal_flush_addr$EN;

  // register rg_choice
  reg rg_choice;
  wire rg_choice$D_IN, rg_choice$EN;

  // register rg_flush
  reg rg_flush;
  wire rg_flush$D_IN, rg_flush$EN;

  // register rg_global_flush_addr
  reg [9 : 0] rg_global_flush_addr;
  wire [9 : 0] rg_global_flush_addr$D_IN;
  wire rg_global_flush_addr$EN;

  // register rg_global_history
  reg [79 : 0] rg_global_history;
  wire [79 : 0] rg_global_history$D_IN;
  wire rg_global_history$EN;

  // register rg_init_rand
  reg rg_init_rand;
  wire rg_init_rand$D_IN, rg_init_rand$EN;

  // register rg_pc_copy
  reg [31 : 0] rg_pc_copy;
  wire [31 : 0] rg_pc_copy$D_IN;
  wire rg_pc_copy$EN;

  // register rg_real_global_history
  reg [79 : 0] rg_real_global_history;
  wire [79 : 0] rg_real_global_history$D_IN;
  wire rg_real_global_history$EN;

  // ports of submodule bram_bank1
  wire [11 : 0] bram_bank1$DIA, bram_bank1$DIB, bram_bank1$DOA;
  wire [9 : 0] bram_bank1$ADDRA, bram_bank1$ADDRB;
  wire bram_bank1$ENA, bram_bank1$ENB, bram_bank1$WEA, bram_bank1$WEB;

  // ports of submodule bram_bank2
  wire [11 : 0] bram_bank2$DIA, bram_bank2$DIB, bram_bank2$DOA;
  wire [9 : 0] bram_bank2$ADDRA, bram_bank2$ADDRB;
  wire bram_bank2$ENA, bram_bank2$ENB, bram_bank2$WEA, bram_bank2$WEB;

  // ports of submodule bram_bank3
  wire [11 : 0] bram_bank3$DIA, bram_bank3$DIB, bram_bank3$DOA;
  wire [9 : 0] bram_bank3$ADDRA, bram_bank3$ADDRB;
  wire bram_bank3$ENA, bram_bank3$ENB, bram_bank3$WEA, bram_bank3$WEB;

  // ports of submodule bram_bank4
  wire [11 : 0] bram_bank4$DIA, bram_bank4$DIB, bram_bank4$DOA;
  wire [9 : 0] bram_bank4$ADDRA, bram_bank4$ADDRB;
  wire bram_bank4$ENA, bram_bank4$ENB, bram_bank4$WEA, bram_bank4$WEB;

  // ports of submodule bram_bimodal
  wire [11 : 0] bram_bimodal$ADDRA, bram_bimodal$ADDRB;
  wire [3 : 0] bram_bimodal$DIA, bram_bimodal$DIB, bram_bimodal$DOA;
  wire bram_bimodal$ENA, bram_bimodal$ENB, bram_bimodal$WEA, bram_bimodal$WEB;

  // ports of submodule random_bank0
  wire [2 : 0] random_bank0$OUT;
  wire random_bank0$EN;

  // ports of submodule random_bank1
  wire [2 : 0] random_bank1$OUT;
  wire random_bank1$EN;

  // ports of submodule random_bank2
  wire [2 : 0] random_bank2$OUT;
  wire random_bank2$EN;

  // inputs to muxes for submodule ports
  reg [79 : 0] MUX_rg_global_history$write_1__VAL_1;
  wire [79 : 0] MUX_rg_global_history$write_1__VAL_2;
  wire [12 : 0] MUX_rg_bimodal_flush_addr$write_1__VAL_1;
  wire [11 : 0] MUX_bram_bank1$b_put_3__VAL_1,
		MUX_bram_bank2$b_put_3__VAL_1,
		MUX_bram_bank3$b_put_3__VAL_1,
		MUX_bram_bank4$b_put_3__VAL_1;
  wire [9 : 0] MUX_bram_bank1$b_put_2__VAL_1,
	       MUX_bram_bank2$b_put_2__VAL_1,
	       MUX_bram_bank3$b_put_2__VAL_1,
	       MUX_bram_bank4$b_put_2__VAL_1,
	       MUX_rg_global_flush_addr$write_1__VAL_1;
  wire [3 : 0] MUX_bram_bimodal$b_put_3__VAL_2;
  wire MUX_bram_bank1$b_put_1__SEL_1,
       MUX_bram_bank2$b_put_1__SEL_1,
       MUX_bram_bank3$b_put_1__SEL_1,
       MUX_bram_bank4$b_put_1__SEL_1,
       MUX_bram_bimodal$b_put_1__SEL_1,
       MUX_rg_flush$write_1__SEL_1,
       MUX_rg_global_flush_addr$write_1__SEL_1,
       MUX_rg_global_history$write_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] TASK_fopen___d20, TASK_fopen___d21, TASK_fopen___d22;
  reg [11 : 0] CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q1,
	       CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q2,
	       IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d758,
	       IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d760,
	       IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d799,
	       IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d801;
  reg [9 : 0] CASE_x2168_0_crg_histport1__read_BITS_9_TO_0__ETC__q15;
  reg [5 : 0] CASE_x2168_2_0_CONCAT_crg_bank1_csr_pport1__r_ETC__q3,
	      CASE_x2168_2_0_CONCAT_crg_bank1_csr_sport1__r_ETC__q7,
	      CASE_x2168_2_0_CONCAT_crg_bank2_csr_indxport1_ETC__q11,
	      CASE_x2168_2_0_CONCAT_crg_bank2_csr_pport1__r_ETC__q4,
	      CASE_x2168_2_0_CONCAT_crg_bank2_csr_sport1__r_ETC__q8,
	      CASE_x2168_2_0_CONCAT_crg_bank3_csr_indxport1_ETC__q12,
	      CASE_x2168_2_0_CONCAT_crg_bank3_csr_pport1__r_ETC__q5,
	      CASE_x2168_2_0_CONCAT_crg_bank3_csr_sport1__r_ETC__q9,
	      CASE_x2168_2_0_CONCAT_crg_bank4_csr_indxport1_ETC__q13,
	      CASE_x2168_2_0_CONCAT_crg_bank4_csr_pport1__r_ETC__q6,
	      CASE_x2168_2_0_CONCAT_crg_bank4_csr_sport1__r_ETC__q10;
  wire [89 : 0] IF_NOT_ma_train_training_data_BIT_23_OR_NOT_ma_ETC__q14,
		_theResult____h10251,
		lv_global_history__h10361,
		lv_global_history__h10374,
		v__h10269;
  wire [79 : 0] x__h10047,
		x__h11978,
		x__h14089,
		x__h16180,
		x__h18271,
		x__h20362;
  wire [15 : 0] IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d188,
		IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d215,
		IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d242,
		x1__h10467,
		x1__h10589,
		x1__h10709,
		x1__h8223,
		x1__h8379,
		x1__h8475;
  wire [13 : 0] IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d273,
		IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d299,
		IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d325,
		IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d447,
		x1__h10832,
		x1__h10931,
		x1__h11028,
		x1__h11148,
		x1__h8574,
		x1__h8776,
		x1__h8890,
		x1__h9585;
  wire [12 : 0] IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d355,
		IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d385,
		IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d415,
		IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d476,
		x1__h11271,
		x1__h11370,
		x1__h11467,
		x1__h11564,
		x1__h8990,
		x1__h9200,
		x1__h9400,
		x1__h9757;
  wire [11 : 0] IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d678,
		IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d684,
		IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d679,
		IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d685,
		IF_ma_train_training_data_BIT_22_63_THEN_IF_ma_ETC___d665,
		x3__h23800,
		x3__h23918,
		x3__h25789,
		x3__h27513,
		x3__h27584,
		x3__h33026;
  wire [9 : 0] x__h24203, x__h6659;
  wire [7 : 0] _theResult___snd_snd_snd__h7710,
	       _theResult___snd_snd_snd__h7734,
	       lv_new_tag1__h7986,
	       lv_new_tag2__h7987,
	       lv_new_tag3__h7988,
	       lv_new_tag4__h7989,
	       x__h28617,
	       x__h28849,
	       x__h28896,
	       x__h28943,
	       x__h6853,
	       x__h7022,
	       x__h7190,
	       x__h7358,
	       x__h7686,
	       y__h28618,
	       y__h28850,
	       y__h28897,
	       y__h28944,
	       y__h6817,
	       y__h6854,
	       y__h6986,
	       y__h7023,
	       y__h7154,
	       y__h7191,
	       y__h7322,
	       y__h7359;
  wire [4 : 0] x__h7787;
  wire [2 : 0] IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d627,
	       IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d629,
	       IF_ma_train_training_data_BIT_10_31_OR_ma_trai_ETC___d681,
	       IF_ma_train_training_data_BIT_10_31_THEN_0b11__ETC___d668,
	       _theResult___snd_fst__h7583,
	       _theResult___snd_fst__h7610,
	       _theResult___snd_fst__h7637,
	       _theResult___snd_snd_fst__h7709,
	       _theResult___snd_snd_fst__h7733,
	       _theResult___snd_snd_fst__h7757,
	       ma_train_training_data_BITS_21_TO_19_97_MINUS_1___d628,
	       ma_train_training_data_BITS_21_TO_19_97_PLUS_1___d625,
	       x1__h22156,
	       x__h22168,
	       x__h7557,
	       x__h7893;
  wire IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d541,
       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d548,
       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d555,
       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d560,
       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d565,
       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d571,
       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d577,
       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d583,
       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d588,
       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d593,
       IF_ma_train_training_data_BIT_23_31_THEN_ma_tr_ETC___d426,
       INV_rg_real_global_history_61_BIT_19_62_36_XOR_ETC___d537,
       INV_rg_real_global_history_61_BIT_39_92_43_XOR_ETC___d544,
       INV_rg_real_global_history_61_BIT_79_19_50_XOR_ETC___d551,
       NOT_ma_train_training_data_BITS_5_TO_3_95_EQ_0_ETC___d746,
       NOT_ma_train_training_data_BIT_23_31_32_AND_ma_ETC___d707,
       NOT_ma_train_training_data_BIT_23_31_32_AND_ma_ETC___d788,
       _theResult___fst__h6983,
       _theResult___fst__h7151,
       _theResult___fst__h7319,
       bram_bank1_a_read__5_BITS_8_TO_1_6_EQ_rg_pc_co_ETC___d94,
       bram_bank2_a_read__4_BITS_8_TO_1_5_EQ_rg_pc_co_ETC___d83,
       bram_bank3_a_read__3_BITS_8_TO_1_4_EQ_rg_pc_co_ETC___d72,
       bram_bank4_a_read__0_BITS_8_TO_1_1_EQ_rg_pc_co_ETC___d61,
       lv_prediction__h6792,
       ma_train_training_data_BITS_5_TO_3_95_EQ_1_02__ETC___d785,
       ma_train_training_data_BIT_23_31_AND_ma_train__ETC___d623,
       ma_train_training_data_BIT_23_31_AND_ma_train__ETC___d749,
       rg_bank2_csr_s_30_BIT_5_32_XOR_rg_real_global__ETC___d333,
       rg_real_global_history_61_BIT_19_62_XOR_IF_ma__ETC___d169,
       x__h10491,
       x__h26104,
       x__h26577,
       x__h26632,
       x__h26633,
       x__h26709,
       x__h26710,
       x__h26880,
       x__h27001,
       x__h27150,
       x__h27299,
       x__h31627,
       x__h31703,
       x__h31779,
       x__h31876,
       x__h32024,
       x__h32151,
       x__h32227,
       x__h32324,
       x__h32592,
       x__h32740,
       x__h37063,
       x__h37074,
       x__h37176,
       x__h37277,
       x__h37412,
       x__h37515,
       x__h37607,
       x__h37608,
       x__h37706,
       x__h37707,
       x__h37959,
       x__h38070,
       x__h38169,
       x__h38267,
       x__h38366,
       x__h38786,
       x__h38880,
       x__h8404,
       x__h8405,
       x__h8500,
       x__h8501,
       x__h8726,
       x__h8817,
       x__h8916,
       x__h9149,
       x__h9350,
       x__h9535,
       y__h8408;

  // action method ma_put
  assign RDY_ma_put = 1'd1 ;

  // actionvalue method mn_get
  assign mn_get =
	     { lv_prediction__h6792,
	       x__h7557,
	       x__h7686,
	       x__h7787,
	       x__h7893,
	       bram_bimodal$DOA[3:1] } ;
  assign RDY_mn_get = 1'd1 ;

  // action method ma_train
  assign RDY_ma_train =
	     !rg_flush && random_bank0_initialized &&
	     random_bank1_initialized &&
	     random_bank2_initialized ;

  // action method ma_shadow
  assign RDY_ma_shadow = 1'd1 ;

  // action method ma_flush
  assign RDY_ma_flush = !rg_flush ;

  // submodule bram_bank1
  BRAM2Load #(.FILENAME("bank1.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd12),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd1)) bram_bank1(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_bank1$ADDRA),
					.ADDRB(bram_bank1$ADDRB),
					.DIA(bram_bank1$DIA),
					.DIB(bram_bank1$DIB),
					.WEA(bram_bank1$WEA),
					.WEB(bram_bank1$WEB),
					.ENA(bram_bank1$ENA),
					.ENB(bram_bank1$ENB),
					.DOA(bram_bank1$DOA),
					.DOB());

  // submodule bram_bank2
  BRAM2Load #(.FILENAME("bank2.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd12),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd1)) bram_bank2(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_bank2$ADDRA),
					.ADDRB(bram_bank2$ADDRB),
					.DIA(bram_bank2$DIA),
					.DIB(bram_bank2$DIB),
					.WEA(bram_bank2$WEA),
					.WEB(bram_bank2$WEB),
					.ENA(bram_bank2$ENA),
					.ENB(bram_bank2$ENB),
					.DOA(bram_bank2$DOA),
					.DOB());

  // submodule bram_bank3
  BRAM2Load #(.FILENAME("bank3.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd12),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd1)) bram_bank3(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_bank3$ADDRA),
					.ADDRB(bram_bank3$ADDRB),
					.DIA(bram_bank3$DIA),
					.DIB(bram_bank3$DIB),
					.WEA(bram_bank3$WEA),
					.WEB(bram_bank3$WEB),
					.ENA(bram_bank3$ENA),
					.ENB(bram_bank3$ENB),
					.DOA(bram_bank3$DOA),
					.DOB());

  // submodule bram_bank4
  BRAM2Load #(.FILENAME("bank4.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd10),
	      .DATA_WIDTH(32'd12),
	      .MEMSIZE(11'd1024),
	      .BINARY(1'd1)) bram_bank4(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bram_bank4$ADDRA),
					.ADDRB(bram_bank4$ADDRB),
					.DIA(bram_bank4$DIA),
					.DIB(bram_bank4$DIB),
					.WEA(bram_bank4$WEA),
					.WEB(bram_bank4$WEB),
					.ENA(bram_bank4$ENA),
					.ENB(bram_bank4$ENB),
					.DOA(bram_bank4$DOA),
					.DOB());

  // submodule bram_bimodal
  BRAM2Load #(.FILENAME("bimodal.bin"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd12),
	      .DATA_WIDTH(32'd4),
	      .MEMSIZE(13'd4096),
	      .BINARY(1'd1)) bram_bimodal(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(bram_bimodal$ADDRA),
					  .ADDRB(bram_bimodal$ADDRB),
					  .DIA(bram_bimodal$DIA),
					  .DIB(bram_bimodal$DIB),
					  .WEA(bram_bimodal$WEA),
					  .WEB(bram_bimodal$WEB),
					  .ENA(bram_bimodal$ENA),
					  .ENB(bram_bimodal$ENB),
					  .DOA(bram_bimodal$DOA),
					  .DOB());

  // submodule random_bank0
  ConstrainedRandom #(.width(32'd3),
		      .min(3'd1),
		      .max(3'd4)) random_bank0(.RST(RST_N),
					       .CLK(CLK),
					       .EN(random_bank0$EN),
					       .OUT(random_bank0$OUT));

  // submodule random_bank1
  ConstrainedRandom #(.width(32'd3),
		      .min(3'd2),
		      .max(3'd4)) random_bank1(.RST(RST_N),
					       .CLK(CLK),
					       .EN(random_bank1$EN),
					       .OUT(random_bank1$OUT));

  // submodule random_bank2
  ConstrainedRandom #(.width(32'd3),
		      .min(3'd3),
		      .max(3'd4)) random_bank2(.RST(RST_N),
					       .CLK(CLK),
					       .EN(random_bank2$EN),
					       .OUT(random_bank2$OUT));

  // inputs to muxes for submodule ports
  assign MUX_bram_bank1$b_put_1__SEL_1 =
	     EN_ma_train &&
	     (ma_train_training_data[23] &&
	      ma_train_training_data[5:3] == 3'd1 ||
	      !ma_train_training_data[23] &&
	      (ma_train_training_data[5:3] == 3'd0 &&
	       (ma_train_training_data[9:6] == 4'b1111 &&
		random_bank0$OUT == 3'd1 ||
		!ma_train_training_data[9]) ||
	       ma_train_training_data[5:3] == 3'd1)) ;
  assign MUX_bram_bank2$b_put_1__SEL_1 =
	     EN_ma_train &&
	     (ma_train_training_data[23] &&
	      ma_train_training_data[5:3] == 3'd2 ||
	      NOT_ma_train_training_data_BIT_23_31_32_AND_ma_ETC___d707) ;
  assign MUX_bram_bank3$b_put_1__SEL_1 =
	     EN_ma_train &&
	     ma_train_training_data_BIT_23_31_AND_ma_train__ETC___d749 ;
  assign MUX_bram_bank4$b_put_1__SEL_1 =
	     EN_ma_train &&
	     (ma_train_training_data[23] &&
	      ma_train_training_data[5:3] == 3'd4 ||
	      NOT_ma_train_training_data_BIT_23_31_32_AND_ma_ETC___d788) ;
  assign MUX_bram_bimodal$b_put_1__SEL_1 =
	     rg_flush && !rg_bimodal_flush_addr[12] ;
  assign MUX_rg_flush$write_1__SEL_1 = rg_flush && rg_bimodal_flush_addr[12] ;
  assign MUX_rg_global_flush_addr$write_1__SEL_1 =
	     rg_flush && rg_global_flush_addr != 10'd1023 ;
  assign MUX_rg_global_history$write_1__SEL_1 =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 || x__h22168 == 3'd1 || x__h22168 == 3'd2 ||
	      x__h22168 == 3'd3 ||
	      x__h22168 == 3'd4 ||
	      x__h22168 == 3'd5 ||
	      x__h22168 == 3'd6) ;
  assign MUX_bram_bank1$b_put_2__VAL_1 =
	     x__h24203 ^ rg_real_global_history[9:0] ;
  assign MUX_bram_bank1$b_put_3__VAL_1 =
	     ma_train_training_data[23] ?
	       IF_ma_train_training_data_BIT_22_63_THEN_IF_ma_ETC___d665 :
	       (ma_train_training_data[22] ?
		  IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d679 :
		  IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d685) ;
  assign MUX_bram_bank2$b_put_2__VAL_1 = x__h24203 ^ rg_bank2_csr_indx ;
  assign MUX_bram_bank2$b_put_3__VAL_1 =
	     ma_train_training_data[23] ?
	       IF_ma_train_training_data_BIT_22_63_THEN_IF_ma_ETC___d665 :
	       (ma_train_training_data[22] ?
		  CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q1 :
		  CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q2) ;
  assign MUX_bram_bank3$b_put_2__VAL_1 = x__h24203 ^ rg_bank3_csr_indx ;
  assign MUX_bram_bank3$b_put_3__VAL_1 =
	     ma_train_training_data[23] ?
	       IF_ma_train_training_data_BIT_22_63_THEN_IF_ma_ETC___d665 :
	       (ma_train_training_data[22] ?
		  IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d758 :
		  IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d760) ;
  assign MUX_bram_bank4$b_put_2__VAL_1 = x__h24203 ^ rg_bank4_csr_indx ;
  assign MUX_bram_bank4$b_put_3__VAL_1 =
	     ma_train_training_data[23] ?
	       IF_ma_train_training_data_BIT_22_63_THEN_IF_ma_ETC___d665 :
	       (ma_train_training_data[22] ?
		  IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d799 :
		  IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d801) ;
  assign MUX_bram_bimodal$b_put_3__VAL_2 =
	     ma_train_training_data[23] ?
	       { ma_train_training_data[22] ?
		   IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d627 :
		   IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d629,
		 ma_train_training_data[5:3] != 3'd0 ||
		 ma_train_training_data[10] } :
	       { ma_train_training_data[22] ?
		   IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d629 :
		   IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d627,
		 ma_train_training_data[5:3] == 3'd0 &&
		 ma_train_training_data[10] } ;
  assign MUX_rg_bimodal_flush_addr$write_1__VAL_1 =
	     rg_bimodal_flush_addr + 13'd1 ;
  assign MUX_rg_global_flush_addr$write_1__VAL_1 =
	     rg_global_flush_addr + 10'd1 ;
  always@(x__h22168 or
	  ma_train_training_data or
	  x__h20362 or
	  _theResult____h10251 or
	  x__h10047 or
	  IF_NOT_ma_train_training_data_BIT_23_OR_NOT_ma_ETC__q14 or
	  x__h11978 or x__h14089 or x__h16180 or x__h18271)
  begin
    case (x__h22168)
      3'd0: MUX_rg_global_history$write_1__VAL_1 = x__h10047;
      3'd1:
	  MUX_rg_global_history$write_1__VAL_1 =
	      IF_NOT_ma_train_training_data_BIT_23_OR_NOT_ma_ETC__q14[89:10];
      3'd2:
	  MUX_rg_global_history$write_1__VAL_1 =
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ?
		x__h11978 :
		_theResult____h10251[89:10];
      3'd3:
	  MUX_rg_global_history$write_1__VAL_1 =
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ?
		x__h14089 :
		_theResult____h10251[89:10];
      3'd4:
	  MUX_rg_global_history$write_1__VAL_1 =
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ?
		x__h16180 :
		_theResult____h10251[89:10];
      3'd5:
	  MUX_rg_global_history$write_1__VAL_1 =
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ?
		x__h18271 :
		_theResult____h10251[89:10];
      default: MUX_rg_global_history$write_1__VAL_1 =
		   (!ma_train_training_data[23] ||
		    !ma_train_training_data[24]) ?
		     x__h20362 :
		     _theResult____h10251[89:10];
    endcase
  end
  assign MUX_rg_global_history$write_1__VAL_2 =
	     { rg_global_history[78:0], crg_hist[9] } ;

  // inlined wires
  assign crg_bank1_csr_p$port0__write_1 =
	     { crg_bank1_csr_p[12:6],
	       crg_hist[9] ^ crg_bank1_csr_p[5],
	       crg_bank1_csr_p[4:0],
	       x__h38880 } ;
  assign crg_bank1_csr_p$port1__read =
	     EN_ma_shadow ? crg_bank1_csr_p$port0__write_1 : crg_bank1_csr_p ;
  assign crg_bank1_csr_p$EN_port1__write =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 ||
	      x__h22168 == 3'd1 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd2 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd3 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd4 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      (x__h22168 == 3'd5 || x__h22168 == 3'd6) &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24])) ;
  always@(x__h22168 or
	  IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d447 or
	  x1__h9585 or x1__h10832)
  begin
    case (x__h22168)
      3'd0: crg_bank1_csr_p$port1__write_1 = x1__h9585;
      3'd1: crg_bank1_csr_p$port1__write_1 = x1__h10832;
      default: crg_bank1_csr_p$port1__write_1 =
		   IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d447;
    endcase
  end
  assign crg_bank1_csr_p$port2__read =
	     crg_bank1_csr_p$EN_port1__write ?
	       crg_bank1_csr_p$port1__write_1 :
	       crg_bank1_csr_p$port1__read ;
  assign crg_bank2_csr_p$port0__write_1 =
	     { crg_bank2_csr_p[12:4],
	       x__h37412,
	       crg_bank2_csr_p[2:0],
	       x__h37515 } ;
  assign crg_bank2_csr_p$port1__read =
	     EN_ma_shadow ? crg_bank2_csr_p$port0__write_1 : crg_bank2_csr_p ;
  assign crg_bank2_csr_p$EN_port1__write =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 ||
	      x__h22168 == 3'd1 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd2 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd3 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd4 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      (x__h22168 == 3'd5 || x__h22168 == 3'd6) &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24])) ;
  always@(x__h22168 or
	  IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d273 or
	  x1__h8574 or x1__h10931)
  begin
    case (x__h22168)
      3'd0: crg_bank2_csr_p$port1__write_1 = x1__h8574;
      3'd1: crg_bank2_csr_p$port1__write_1 = x1__h10931;
      default: crg_bank2_csr_p$port1__write_1 =
		   IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d273;
    endcase
  end
  assign crg_bank2_csr_p$port2__read =
	     crg_bank2_csr_p$EN_port1__write ?
	       crg_bank2_csr_p$port1__write_1 :
	       crg_bank2_csr_p$port1__read ;
  assign crg_bank3_csr_p$port0__write_1 =
	     { crg_bank3_csr_p[12:0], x__h37607 } ;
  assign crg_bank3_csr_p$port1__read =
	     EN_ma_shadow ? crg_bank3_csr_p$port0__write_1 : crg_bank3_csr_p ;
  assign crg_bank3_csr_p$EN_port1__write =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 ||
	      x__h22168 == 3'd1 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd2 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd3 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd4 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      (x__h22168 == 3'd5 || x__h22168 == 3'd6) &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24])) ;
  always@(x__h22168 or
	  IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d299 or
	  x1__h8776 or x1__h11028)
  begin
    case (x__h22168)
      3'd0: crg_bank3_csr_p$port1__write_1 = x1__h8776;
      3'd1: crg_bank3_csr_p$port1__write_1 = x1__h11028;
      default: crg_bank3_csr_p$port1__write_1 =
		   IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d299;
    endcase
  end
  assign crg_bank3_csr_p$port2__read =
	     crg_bank3_csr_p$EN_port1__write ?
	       crg_bank3_csr_p$port1__write_1 :
	       crg_bank3_csr_p$port1__read ;
  assign crg_bank4_csr_p$port0__write_1 =
	     { crg_bank4_csr_p[12:0], x__h37706 } ;
  assign crg_bank4_csr_p$port1__read =
	     EN_ma_shadow ? crg_bank4_csr_p$port0__write_1 : crg_bank4_csr_p ;
  assign crg_bank4_csr_p$EN_port1__write =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 ||
	      x__h22168 == 3'd1 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd2 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd3 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd4 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      (x__h22168 == 3'd5 || x__h22168 == 3'd6) &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24])) ;
  always@(x__h22168 or
	  IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d325 or
	  x1__h8890 or x1__h11148)
  begin
    case (x__h22168)
      3'd0: crg_bank4_csr_p$port1__write_1 = x1__h8890;
      3'd1: crg_bank4_csr_p$port1__write_1 = x1__h11148;
      default: crg_bank4_csr_p$port1__write_1 =
		   IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d325;
    endcase
  end
  assign crg_bank4_csr_p$port2__read =
	     crg_bank4_csr_p$EN_port1__write ?
	       crg_bank4_csr_p$port1__write_1 :
	       crg_bank4_csr_p$port1__read ;
  assign crg_bank1_csr_s$port0__write_1 =
	     { crg_bank1_csr_s[11:4],
	       x__h38786,
	       crg_bank1_csr_p[2:0],
	       x__h38880 } ;
  assign crg_bank1_csr_s$port1__read =
	     EN_ma_shadow ? crg_bank1_csr_s$port0__write_1 : crg_bank1_csr_s ;
  assign crg_bank1_csr_s$EN_port1__write =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 ||
	      x__h22168 == 3'd1 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd2 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd3 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd4 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      (x__h22168 == 3'd5 || x__h22168 == 3'd6) &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24])) ;
  always@(x__h22168 or
	  IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d476 or
	  x1__h9757 or x1__h11271)
  begin
    case (x__h22168)
      3'd0: crg_bank1_csr_s$port1__write_1 = x1__h9757;
      3'd1: crg_bank1_csr_s$port1__write_1 = x1__h11271;
      default: crg_bank1_csr_s$port1__write_1 =
		   IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d476;
    endcase
  end
  assign crg_bank1_csr_s$port2__read =
	     crg_bank1_csr_s$EN_port1__write ?
	       crg_bank1_csr_s$port1__write_1 :
	       crg_bank1_csr_s$port1__read ;
  assign crg_bank2_csr_s$port0__write_1 =
	     { crg_bank2_csr_s[11:6],
	       crg_bank2_csr_s[5] ^ rg_global_history[9],
	       crg_bank2_csr_p[4:0],
	       x__h37959 } ;
  assign crg_bank2_csr_s$port1__read =
	     EN_ma_shadow ? crg_bank2_csr_s$port0__write_1 : crg_bank2_csr_s ;
  assign crg_bank2_csr_s$EN_port1__write =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 ||
	      x__h22168 == 3'd1 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd2 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd3 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd4 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      (x__h22168 == 3'd5 || x__h22168 == 3'd6) &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24])) ;
  always@(x__h22168 or
	  IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d355 or
	  x1__h8990 or x1__h11370)
  begin
    case (x__h22168)
      3'd0: crg_bank2_csr_s$port1__write_1 = x1__h8990;
      3'd1: crg_bank2_csr_s$port1__write_1 = x1__h11370;
      default: crg_bank2_csr_s$port1__write_1 =
		   IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d355;
    endcase
  end
  assign crg_bank2_csr_s$port2__read =
	     crg_bank2_csr_s$EN_port1__write ?
	       crg_bank2_csr_s$port1__write_1 :
	       crg_bank2_csr_s$port1__read ;
  assign crg_bank3_csr_s$port0__write_1 =
	     { crg_bank3_csr_s[11:5],
	       x__h38070,
	       crg_bank3_csr_p[3:0],
	       x__h38169 } ;
  assign crg_bank3_csr_s$port1__read =
	     EN_ma_shadow ? crg_bank3_csr_s$port0__write_1 : crg_bank3_csr_s ;
  assign crg_bank3_csr_s$EN_port1__write =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 ||
	      x__h22168 == 3'd1 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd2 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd3 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd4 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      (x__h22168 == 3'd5 || x__h22168 == 3'd6) &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24])) ;
  always@(x__h22168 or
	  IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d385 or
	  x1__h9200 or x1__h11467)
  begin
    case (x__h22168)
      3'd0: crg_bank3_csr_s$port1__write_1 = x1__h9200;
      3'd1: crg_bank3_csr_s$port1__write_1 = x1__h11467;
      default: crg_bank3_csr_s$port1__write_1 =
		   IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d385;
    endcase
  end
  assign crg_bank3_csr_s$port2__read =
	     crg_bank3_csr_s$EN_port1__write ?
	       crg_bank3_csr_s$port1__write_1 :
	       crg_bank3_csr_s$port1__read ;
  assign crg_bank4_csr_s$port0__write_1 =
	     { crg_bank4_csr_s[11:3],
	       x__h38267,
	       crg_bank4_csr_p[1:0],
	       x__h38366 } ;
  assign crg_bank4_csr_s$port1__read =
	     EN_ma_shadow ? crg_bank4_csr_s$port0__write_1 : crg_bank4_csr_s ;
  assign crg_bank4_csr_s$EN_port1__write =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 ||
	      x__h22168 == 3'd1 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd2 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd3 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd4 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      (x__h22168 == 3'd5 || x__h22168 == 3'd6) &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24])) ;
  always@(x__h22168 or
	  IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d415 or
	  x1__h9400 or x1__h11564)
  begin
    case (x__h22168)
      3'd0: crg_bank4_csr_s$port1__write_1 = x1__h9400;
      3'd1: crg_bank4_csr_s$port1__write_1 = x1__h11564;
      default: crg_bank4_csr_s$port1__write_1 =
		   IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d415;
    endcase
  end
  assign crg_bank4_csr_s$port2__read =
	     crg_bank4_csr_s$EN_port1__write ?
	       crg_bank4_csr_s$port1__write_1 :
	       crg_bank4_csr_s$port1__read ;
  assign crg_bank2_csr_indx$port0__write_1 =
	     { crg_bank2_csr_indx[14:0], x__h37063 } ;
  assign crg_bank2_csr_indx$port1__read =
	     EN_ma_shadow ?
	       crg_bank2_csr_indx$port0__write_1 :
	       crg_bank2_csr_indx ;
  assign crg_bank2_csr_indx$EN_port1__write =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 ||
	      x__h22168 == 3'd1 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd2 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd3 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd4 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      (x__h22168 == 3'd5 || x__h22168 == 3'd6) &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24])) ;
  always@(x__h22168 or
	  IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d188 or
	  x1__h8223 or x1__h10467)
  begin
    case (x__h22168)
      3'd0: crg_bank2_csr_indx$port1__write_1 = x1__h8223;
      3'd1: crg_bank2_csr_indx$port1__write_1 = x1__h10467;
      default: crg_bank2_csr_indx$port1__write_1 =
		   IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d188;
    endcase
  end
  assign crg_bank2_csr_indx$port2__read =
	     crg_bank2_csr_indx$EN_port1__write ?
	       crg_bank2_csr_indx$port1__write_1 :
	       crg_bank2_csr_indx$port1__read ;
  assign crg_bank3_csr_indx$port0__write_1 =
	     { crg_bank3_csr_indx[14:0], x__h37176 } ;
  assign crg_bank3_csr_indx$port1__read =
	     EN_ma_shadow ?
	       crg_bank3_csr_indx$port0__write_1 :
	       crg_bank3_csr_indx ;
  assign crg_bank3_csr_indx$EN_port1__write =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 ||
	      x__h22168 == 3'd1 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd2 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd3 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd4 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      (x__h22168 == 3'd5 || x__h22168 == 3'd6) &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24])) ;
  always@(x__h22168 or
	  IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d215 or
	  x1__h8379 or x1__h10589)
  begin
    case (x__h22168)
      3'd0: crg_bank3_csr_indx$port1__write_1 = x1__h8379;
      3'd1: crg_bank3_csr_indx$port1__write_1 = x1__h10589;
      default: crg_bank3_csr_indx$port1__write_1 =
		   IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d215;
    endcase
  end
  assign crg_bank3_csr_indx$port2__read =
	     crg_bank3_csr_indx$EN_port1__write ?
	       crg_bank3_csr_indx$port1__write_1 :
	       crg_bank3_csr_indx$port1__read ;
  assign crg_bank4_csr_indx$port0__write_1 =
	     { crg_bank4_csr_indx[14:0], x__h37277 } ;
  assign crg_bank4_csr_indx$port1__read =
	     EN_ma_shadow ?
	       crg_bank4_csr_indx$port0__write_1 :
	       crg_bank4_csr_indx ;
  assign crg_bank4_csr_indx$EN_port1__write =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 ||
	      x__h22168 == 3'd1 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd2 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd3 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd4 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      (x__h22168 == 3'd5 || x__h22168 == 3'd6) &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24])) ;
  always@(x__h22168 or
	  IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d242 or
	  x1__h8475 or x1__h10709)
  begin
    case (x__h22168)
      3'd0: crg_bank4_csr_indx$port1__write_1 = x1__h8475;
      3'd1: crg_bank4_csr_indx$port1__write_1 = x1__h10709;
      default: crg_bank4_csr_indx$port1__write_1 =
		   IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d242;
    endcase
  end
  assign crg_bank4_csr_indx$port2__read =
	     crg_bank4_csr_indx$EN_port1__write ?
	       crg_bank4_csr_indx$port1__write_1 :
	       crg_bank4_csr_indx$port1__read ;
  assign crg_inflight$port0__write_1 = crg_inflight + 3'd1 ;
  assign crg_inflight$EN_port1__write =
	     EN_ma_train &&
	     (x__h22168 == 3'd1 || x__h22168 == 3'd2 || x__h22168 == 3'd3 ||
	      x__h22168 == 3'd4 ||
	      x__h22168 == 3'd5 ||
	      x__h22168 == 3'd6) ;
  assign crg_inflight$port1__write_1 =
	     (!ma_train_training_data[23] || !ma_train_training_data[24]) ?
	       3'd0 :
	       x1__h22156 ;
  assign crg_inflight$port2__read =
	     crg_inflight$EN_port1__write ?
	       crg_inflight$port1__write_1 :
	       x__h22168 ;
  assign crg_hist$port0__write_1 = { crg_hist[9:0], ma_shadow_prediction } ;
  assign crg_hist$port1__read =
	     EN_ma_shadow ? crg_hist$port0__write_1 : crg_hist ;
  assign crg_hist$EN_port1__write =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 ||
	      x__h22168 == 3'd1 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd2 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd3 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      x__h22168 == 3'd4 &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24]) ||
	      (x__h22168 == 3'd5 || x__h22168 == 3'd6) &&
	      (!ma_train_training_data[23] || !ma_train_training_data[24])) ;
  assign crg_hist$port1__write_1 =
	     { CASE_x2168_0_crg_histport1__read_BITS_9_TO_0__ETC__q15,
	       y__h8408 } ;
  assign crg_hist$port2__read =
	     crg_hist$EN_port1__write ?
	       crg_hist$port1__write_1 :
	       crg_hist$port1__read ;

  // register crg_bank1_csr_p
  assign crg_bank1_csr_p$D_IN = crg_bank1_csr_p$port2__read ;
  assign crg_bank1_csr_p$EN = 1'b1 ;

  // register crg_bank1_csr_s
  assign crg_bank1_csr_s$D_IN = crg_bank1_csr_s$port2__read ;
  assign crg_bank1_csr_s$EN = 1'b1 ;

  // register crg_bank2_csr_indx
  assign crg_bank2_csr_indx$D_IN = crg_bank2_csr_indx$port2__read ;
  assign crg_bank2_csr_indx$EN = 1'b1 ;

  // register crg_bank2_csr_p
  assign crg_bank2_csr_p$D_IN = crg_bank2_csr_p$port2__read ;
  assign crg_bank2_csr_p$EN = 1'b1 ;

  // register crg_bank2_csr_s
  assign crg_bank2_csr_s$D_IN = crg_bank2_csr_s$port2__read ;
  assign crg_bank2_csr_s$EN = 1'b1 ;

  // register crg_bank3_csr_indx
  assign crg_bank3_csr_indx$D_IN = crg_bank3_csr_indx$port2__read ;
  assign crg_bank3_csr_indx$EN = 1'b1 ;

  // register crg_bank3_csr_p
  assign crg_bank3_csr_p$D_IN = crg_bank3_csr_p$port2__read ;
  assign crg_bank3_csr_p$EN = 1'b1 ;

  // register crg_bank3_csr_s
  assign crg_bank3_csr_s$D_IN = crg_bank3_csr_s$port2__read ;
  assign crg_bank3_csr_s$EN = 1'b1 ;

  // register crg_bank4_csr_indx
  assign crg_bank4_csr_indx$D_IN = crg_bank4_csr_indx$port2__read ;
  assign crg_bank4_csr_indx$EN = 1'b1 ;

  // register crg_bank4_csr_p
  assign crg_bank4_csr_p$D_IN = crg_bank4_csr_p$port2__read ;
  assign crg_bank4_csr_p$EN = 1'b1 ;

  // register crg_bank4_csr_s
  assign crg_bank4_csr_s$D_IN = crg_bank4_csr_s$port2__read ;
  assign crg_bank4_csr_s$EN = 1'b1 ;

  // register crg_hist
  assign crg_hist$D_IN = crg_hist$port2__read ;
  assign crg_hist$EN = 1'b1 ;

  // register crg_inflight
  assign crg_inflight$D_IN = crg_inflight$port2__read ;
  assign crg_inflight$EN = 1'b1 ;

  // register dump1
  assign dump1$D_IN = TASK_fopen___d20 ;
  assign dump1$EN = file_open ;

  // register dump2
  assign dump2$D_IN = TASK_fopen___d21 ;
  assign dump2$EN = file_open ;

  // register dump3
  assign dump3$D_IN = TASK_fopen___d22 ;
  assign dump3$EN = file_open ;

  // register file_open
  assign file_open$D_IN = 1'd0 ;
  assign file_open$EN = file_open ;

  // register random_bank0_initialized
  assign random_bank0_initialized$D_IN = 1'd1 ;
  assign random_bank0_initialized$EN = rg_init_rand ;

  // register random_bank1_initialized
  assign random_bank1_initialized$D_IN = 1'd1 ;
  assign random_bank1_initialized$EN = rg_init_rand ;

  // register random_bank2_initialized
  assign random_bank2_initialized$D_IN = 1'd1 ;
  assign random_bank2_initialized$EN = rg_init_rand ;

  // register rg_bank1_csr_p
  assign rg_bank1_csr_p$D_IN =
	     { rg_bank1_csr_p[6],
	       x__h31876,
	       rg_bank1_csr_p[4:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d560 } ;
  assign rg_bank1_csr_p$EN = EN_ma_train ;

  // register rg_bank1_csr_s
  assign rg_bank1_csr_s$D_IN =
	     { rg_bank1_csr_s[5:4],
	       x__h32324,
	       rg_bank1_csr_p[2:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d560 } ;
  assign rg_bank1_csr_s$EN = EN_ma_train ;

  // register rg_bank2_csr_indx
  assign rg_bank2_csr_indx$D_IN =
	     { rg_bank2_csr_indx[8:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d541 } ;
  assign rg_bank2_csr_indx$EN = EN_ma_train ;

  // register rg_bank2_csr_p
  assign rg_bank2_csr_p$D_IN =
	     { rg_bank2_csr_p[6:4],
	       x__h32024,
	       rg_bank2_csr_p[2:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d565 } ;
  assign rg_bank2_csr_p$EN = EN_ma_train ;

  // register rg_bank2_csr_s
  assign rg_bank2_csr_s$D_IN =
	     { rg_bank2_csr_s_30_BIT_5_32_XOR_rg_real_global__ETC___d333,
	       rg_bank2_csr_p[4:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d583 } ;
  assign rg_bank2_csr_s$EN = EN_ma_train ;

  // register rg_bank3_csr_indx
  assign rg_bank3_csr_indx$D_IN =
	     { rg_bank3_csr_indx[8:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d548 } ;
  assign rg_bank3_csr_indx$EN = EN_ma_train ;

  // register rg_bank3_csr_p
  assign rg_bank3_csr_p$D_IN =
	     { rg_bank3_csr_p[6:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d571 } ;
  assign rg_bank3_csr_p$EN = EN_ma_train ;

  // register rg_bank3_csr_s
  assign rg_bank3_csr_s$D_IN =
	     { rg_bank3_csr_s[5],
	       x__h32592,
	       rg_bank3_csr_p[3:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d588 } ;
  assign rg_bank3_csr_s$EN = EN_ma_train ;

  // register rg_bank4_csr_indx
  assign rg_bank4_csr_indx$D_IN =
	     { rg_bank4_csr_indx[8:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d555 } ;
  assign rg_bank4_csr_indx$EN = EN_ma_train ;

  // register rg_bank4_csr_p
  assign rg_bank4_csr_p$D_IN =
	     { rg_bank4_csr_p[6:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d577 } ;
  assign rg_bank4_csr_p$EN = EN_ma_train ;

  // register rg_bank4_csr_s
  assign rg_bank4_csr_s$D_IN =
	     { rg_bank4_csr_s[5:3],
	       x__h32740,
	       rg_bank4_csr_p[1:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d593 } ;
  assign rg_bank4_csr_s$EN = EN_ma_train ;

  // register rg_bimodal_flush_addr
  assign rg_bimodal_flush_addr$D_IN =
	     MUX_bram_bimodal$b_put_1__SEL_1 ?
	       MUX_rg_bimodal_flush_addr$write_1__VAL_1 :
	       13'd0 ;
  assign rg_bimodal_flush_addr$EN =
	     rg_flush && !rg_bimodal_flush_addr[12] || EN_ma_flush ;

  // register rg_choice
  assign rg_choice$D_IN = 1'b0 ;
  assign rg_choice$EN = 1'b0 ;

  // register rg_flush
  assign rg_flush$D_IN = !MUX_rg_flush$write_1__SEL_1 ;
  assign rg_flush$EN = rg_flush && rg_bimodal_flush_addr[12] || EN_ma_flush ;

  // register rg_global_flush_addr
  assign rg_global_flush_addr$D_IN =
	     MUX_rg_global_flush_addr$write_1__SEL_1 ?
	       MUX_rg_global_flush_addr$write_1__VAL_1 :
	       10'd0 ;
  assign rg_global_flush_addr$EN =
	     rg_flush && rg_global_flush_addr != 10'd1023 || EN_ma_flush ;

  // register rg_global_history
  assign rg_global_history$D_IN =
	     MUX_rg_global_history$write_1__SEL_1 ?
	       MUX_rg_global_history$write_1__VAL_1 :
	       MUX_rg_global_history$write_1__VAL_2 ;
  assign rg_global_history$EN =
	     EN_ma_train &&
	     (x__h22168 == 3'd0 || x__h22168 == 3'd1 || x__h22168 == 3'd2 ||
	      x__h22168 == 3'd3 ||
	      x__h22168 == 3'd4 ||
	      x__h22168 == 3'd5 ||
	      x__h22168 == 3'd6) ||
	     EN_ma_shadow && !EN_ma_train ;

  // register rg_init_rand
  assign rg_init_rand$D_IN = 1'd0 ;
  assign rg_init_rand$EN = rg_init_rand ;

  // register rg_pc_copy
  assign rg_pc_copy$D_IN = ma_put_pc ;
  assign rg_pc_copy$EN = EN_ma_put ;

  // register rg_real_global_history
  assign rg_real_global_history$D_IN =
	     { rg_real_global_history[78:0], y__h8408 } ;
  assign rg_real_global_history$EN = EN_ma_train ;

  // submodule bram_bank1
  assign bram_bank1$ADDRA = x__h6659 ^ crg_hist$port1__read[9:0] ;
  assign bram_bank1$ADDRB =
	     MUX_bram_bank1$b_put_1__SEL_1 ?
	       MUX_bram_bank1$b_put_2__VAL_1 :
	       rg_global_flush_addr ;
  assign bram_bank1$DIA = 12'b101010101010 /* unspecified value */  ;
  assign bram_bank1$DIB =
	     MUX_bram_bank1$b_put_1__SEL_1 ?
	       MUX_bram_bank1$b_put_3__VAL_1 :
	       12'b011000000000 ;
  assign bram_bank1$WEA = 1'd0 ;
  assign bram_bank1$WEB = 1'd1 ;
  assign bram_bank1$ENA = EN_ma_put ;
  assign bram_bank1$ENB = MUX_bram_bank1$b_put_1__SEL_1 || rg_flush ;

  // submodule bram_bank2
  assign bram_bank2$ADDRA = x__h6659 ^ crg_bank2_csr_indx$port1__read[9:0] ;
  assign bram_bank2$ADDRB =
	     MUX_bram_bank2$b_put_1__SEL_1 ?
	       MUX_bram_bank2$b_put_2__VAL_1 :
	       rg_global_flush_addr ;
  assign bram_bank2$DIA = 12'b101010101010 /* unspecified value */  ;
  assign bram_bank2$DIB =
	     MUX_bram_bank2$b_put_1__SEL_1 ?
	       MUX_bram_bank2$b_put_3__VAL_1 :
	       12'b011000000000 ;
  assign bram_bank2$WEA = 1'd0 ;
  assign bram_bank2$WEB = 1'd1 ;
  assign bram_bank2$ENA = EN_ma_put ;
  assign bram_bank2$ENB =
	     EN_ma_train &&
	     (ma_train_training_data[23] &&
	      ma_train_training_data[5:3] == 3'd2 ||
	      NOT_ma_train_training_data_BIT_23_31_32_AND_ma_ETC___d707) ||
	     rg_flush ;

  // submodule bram_bank3
  assign bram_bank3$ADDRA = x__h6659 ^ crg_bank3_csr_indx$port1__read[9:0] ;
  assign bram_bank3$ADDRB =
	     MUX_bram_bank3$b_put_1__SEL_1 ?
	       MUX_bram_bank3$b_put_2__VAL_1 :
	       rg_global_flush_addr ;
  assign bram_bank3$DIA = 12'b101010101010 /* unspecified value */  ;
  assign bram_bank3$DIB =
	     MUX_bram_bank3$b_put_1__SEL_1 ?
	       MUX_bram_bank3$b_put_3__VAL_1 :
	       12'b011000000000 ;
  assign bram_bank3$WEA = 1'd0 ;
  assign bram_bank3$WEB = 1'd1 ;
  assign bram_bank3$ENA = EN_ma_put ;
  assign bram_bank3$ENB =
	     EN_ma_train &&
	     ma_train_training_data_BIT_23_31_AND_ma_train__ETC___d749 ||
	     rg_flush ;

  // submodule bram_bank4
  assign bram_bank4$ADDRA = x__h6659 ^ crg_bank4_csr_indx$port1__read[9:0] ;
  assign bram_bank4$ADDRB =
	     MUX_bram_bank4$b_put_1__SEL_1 ?
	       MUX_bram_bank4$b_put_2__VAL_1 :
	       rg_global_flush_addr ;
  assign bram_bank4$DIA = 12'b101010101010 /* unspecified value */  ;
  assign bram_bank4$DIB =
	     MUX_bram_bank4$b_put_1__SEL_1 ?
	       MUX_bram_bank4$b_put_3__VAL_1 :
	       12'b011000000000 ;
  assign bram_bank4$WEA = 1'd0 ;
  assign bram_bank4$WEB = 1'd1 ;
  assign bram_bank4$ENA = EN_ma_put ;
  assign bram_bank4$ENB =
	     EN_ma_train &&
	     (ma_train_training_data[23] &&
	      ma_train_training_data[5:3] == 3'd4 ||
	      NOT_ma_train_training_data_BIT_23_31_32_AND_ma_ETC___d788) ||
	     rg_flush ;

  // submodule bram_bimodal
  assign bram_bimodal$ADDRA = ma_put_pc[11:0] ;
  assign bram_bimodal$ADDRB =
	     MUX_bram_bimodal$b_put_1__SEL_1 ?
	       rg_bimodal_flush_addr[11:0] :
	       ma_train_training_data[36:25] ;
  assign bram_bimodal$DIA = 4'b1010 /* unspecified value */  ;
  assign bram_bimodal$DIB =
	     MUX_bram_bimodal$b_put_1__SEL_1 ?
	       4'b0110 :
	       MUX_bram_bimodal$b_put_3__VAL_2 ;
  assign bram_bimodal$WEA = 1'd0 ;
  assign bram_bimodal$WEB = 1'd1 ;
  assign bram_bimodal$ENA = EN_ma_put ;
  assign bram_bimodal$ENB =
	     rg_flush && !rg_bimodal_flush_addr[12] ||
	     EN_ma_train &&
	     ma_train_training_data_BIT_23_31_AND_ma_train__ETC___d623 ;

  // submodule random_bank0
  assign random_bank0$EN = !random_bank0_initialized || EN_ma_train ;

  // submodule random_bank1
  assign random_bank1$EN = !random_bank1_initialized || EN_ma_train ;

  // submodule random_bank2
  assign random_bank2$EN = !random_bank2_initialized || EN_ma_train ;

  // remaining internal signals
  assign IF_NOT_ma_train_training_data_BIT_23_OR_NOT_ma_ETC__q14 =
	     (!ma_train_training_data[23] || !ma_train_training_data[24]) ?
	       v__h10269 :
	       _theResult____h10251 ;
  assign IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d188 =
	     { CASE_x2168_2_0_CONCAT_crg_bank2_csr_indxport1_ETC__q11,
	       rg_bank2_csr_indx[8:0],
	       rg_real_global_history_61_BIT_19_62_XOR_IF_ma__ETC___d169 } ;
  assign IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d215 =
	     { CASE_x2168_2_0_CONCAT_crg_bank3_csr_indxport1_ETC__q12,
	       rg_bank3_csr_indx[8:0],
	       x__h8404 } ;
  assign IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d242 =
	     { CASE_x2168_2_0_CONCAT_crg_bank4_csr_indxport1_ETC__q13,
	       rg_bank4_csr_indx[8:0],
	       x__h8500 } ;
  assign IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d273 =
	     { CASE_x2168_2_0_CONCAT_crg_bank2_csr_pport1__r_ETC__q4,
	       rg_bank2_csr_p[6:4],
	       x__h32024,
	       rg_bank2_csr_p[2:0],
	       x__h8726 } ;
  assign IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d299 =
	     { CASE_x2168_2_0_CONCAT_crg_bank3_csr_pport1__r_ETC__q5,
	       rg_bank3_csr_p[6:0],
	       x__h8817 } ;
  assign IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d325 =
	     { CASE_x2168_2_0_CONCAT_crg_bank4_csr_pport1__r_ETC__q6,
	       rg_bank4_csr_p[6:0],
	       x__h8916 } ;
  assign IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d355 =
	     { CASE_x2168_2_0_CONCAT_crg_bank2_csr_sport1__r_ETC__q8,
	       rg_bank2_csr_s_30_BIT_5_32_XOR_rg_real_global__ETC___d333,
	       rg_bank2_csr_p[4:0],
	       x__h9149 } ;
  assign IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d385 =
	     { CASE_x2168_2_0_CONCAT_crg_bank3_csr_sport1__r_ETC__q9,
	       rg_bank3_csr_s[5],
	       x__h32592,
	       rg_bank3_csr_p[3:0],
	       x__h9350 } ;
  assign IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d415 =
	     { CASE_x2168_2_0_CONCAT_crg_bank4_csr_sport1__r_ETC__q10,
	       rg_bank4_csr_s[5:3],
	       x__h32740,
	       rg_bank4_csr_p[1:0],
	       x__h9535 } ;
  assign IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d447 =
	     { CASE_x2168_2_0_CONCAT_crg_bank1_csr_pport1__r_ETC__q3,
	       rg_bank1_csr_p[6],
	       x__h31876,
	       rg_bank1_csr_p[4:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_ma_tr_ETC___d426 } ;
  assign IF_crg_inflight_port1__read__28_EQ_2_38_THEN_0_ETC___d476 =
	     { CASE_x2168_2_0_CONCAT_crg_bank1_csr_sport1__r_ETC__q7,
	       rg_bank1_csr_s[5:4],
	       x__h32324,
	       rg_bank1_csr_p[2:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_ma_tr_ETC___d426 } ;
  assign IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d678 =
	     (ma_train_training_data[21:19] == 3'b0) ?
	       x3__h27584 :
	       x3__h33026 ;
  assign IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d684 =
	     (ma_train_training_data[21:19] == 3'b111) ?
	       x3__h27584 :
	       x3__h27513 ;
  assign IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d627 =
	     (ma_train_training_data[5:3] == 3'd0) ?
	       ma_train_training_data_BITS_21_TO_19_97_PLUS_1___d625 :
	       ma_train_training_data[2:0] ;
  assign IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d629 =
	     (ma_train_training_data[5:3] == 3'd0) ?
	       ma_train_training_data_BITS_21_TO_19_97_MINUS_1___d628 :
	       ma_train_training_data[2:0] ;
  assign IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d679 =
	     (ma_train_training_data[5:3] == 3'd0) ?
	       { IF_ma_train_training_data_BIT_10_31_THEN_0b11__ETC___d668,
		 lv_new_tag1__h7986,
		 1'b0 } :
	       IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d678 ;
  assign IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d685 =
	     (ma_train_training_data[5:3] == 3'd0) ?
	       { IF_ma_train_training_data_BIT_10_31_OR_ma_trai_ETC___d681,
		 lv_new_tag1__h7986,
		 1'b0 } :
	       IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d684 ;
  assign IF_ma_train_training_data_BIT_10_31_OR_ma_trai_ETC___d681 =
	     (ma_train_training_data[10] || ma_train_training_data[2]) ?
	       3'b100 :
	       3'b011 ;
  assign IF_ma_train_training_data_BIT_10_31_THEN_0b11__ETC___d668 =
	     ma_train_training_data[10] ?
	       3'b011 :
	       (ma_train_training_data[2] ? 3'b100 : 3'b011) ;
  assign IF_ma_train_training_data_BIT_22_63_THEN_IF_ma_ETC___d665 =
	     ma_train_training_data[22] ?
	       ((ma_train_training_data[21:19] == 3'b111) ?
		  x3__h23918 :
		  x3__h23800) :
	       ((ma_train_training_data[21:19] == 3'b0) ?
		  x3__h23918 :
		  x3__h25789) ;
  assign IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d541 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ?
		  INV_rg_real_global_history_61_BIT_19_62_36_XOR_ETC___d537 :
		  x__h31627) :
	       (ma_train_training_data[22] ?
		  x__h31627 :
		  INV_rg_real_global_history_61_BIT_19_62_36_XOR_ETC___d537) ;
  assign IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d548 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ?
		  INV_rg_real_global_history_61_BIT_39_92_43_XOR_ETC___d544 :
		  x__h31703) :
	       (ma_train_training_data[22] ?
		  x__h31703 :
		  INV_rg_real_global_history_61_BIT_39_92_43_XOR_ETC___d544) ;
  assign IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d555 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ?
		  INV_rg_real_global_history_61_BIT_79_19_50_XOR_ETC___d551 :
		  x__h31779) :
	       (ma_train_training_data[22] ?
		  x__h31779 :
		  INV_rg_real_global_history_61_BIT_79_19_50_XOR_ETC___d551) ;
  assign IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d560 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h26880 : rg_bank1_csr_p[7]) :
	       (ma_train_training_data[22] ? rg_bank1_csr_p[7] : x__h26880) ;
  assign IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d565 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h26577 : rg_bank2_csr_p[7]) :
	       (ma_train_training_data[22] ? rg_bank2_csr_p[7] : x__h26577) ;
  assign IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d571 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h26632 : x__h32151) :
	       (ma_train_training_data[22] ? x__h32151 : x__h26632) ;
  assign IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d577 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h26709 : x__h32227) :
	       (ma_train_training_data[22] ? x__h32227 : x__h26709) ;
  assign IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d583 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h27001 : rg_bank2_csr_p[6]) :
	       (ma_train_training_data[22] ? rg_bank2_csr_p[6] : x__h27001) ;
  assign IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d588 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h27150 : rg_bank3_csr_p[7]) :
	       (ma_train_training_data[22] ? rg_bank3_csr_p[7] : x__h27150) ;
  assign IF_ma_train_training_data_BIT_23_31_THEN_IF_ma_ETC___d593 =
	     ma_train_training_data[23] ?
	       (ma_train_training_data[22] ? x__h27299 : rg_bank4_csr_p[7]) :
	       (ma_train_training_data[22] ? rg_bank4_csr_p[7] : x__h27299) ;
  assign IF_ma_train_training_data_BIT_23_31_THEN_ma_tr_ETC___d426 =
	     y__h8408 ^ rg_bank1_csr_p[7] ;
  assign INV_rg_real_global_history_61_BIT_19_62_36_XOR_ETC___d537 =
	     x__h26104 ^ rg_bank2_csr_indx[9] ;
  assign INV_rg_real_global_history_61_BIT_39_92_43_XOR_ETC___d544 =
	     x__h26633 ^ rg_bank3_csr_indx[9] ;
  assign INV_rg_real_global_history_61_BIT_79_19_50_XOR_ETC___d551 =
	     x__h26710 ^ rg_bank4_csr_indx[9] ;
  assign NOT_ma_train_training_data_BITS_5_TO_3_95_EQ_0_ETC___d746 =
	     ma_train_training_data[5:3] == 3'd1 &&
	     (ma_train_training_data[8:6] == 3'b111 &&
	      random_bank1$OUT == 3'd3 ||
	      !ma_train_training_data[7]) ||
	     ma_train_training_data[5:3] == 3'd2 &&
	     (ma_train_training_data[7:6] == 2'b11 &&
	      random_bank2$OUT == 3'd3 ||
	      !ma_train_training_data[7]) ||
	     ma_train_training_data[5:3] == 3'd3 ;
  assign NOT_ma_train_training_data_BIT_23_31_32_AND_ma_ETC___d707 =
	     !ma_train_training_data[23] &&
	     (ma_train_training_data[5:3] == 3'd0 &&
	      (ma_train_training_data[9:6] == 4'b1111 &&
	       random_bank0$OUT == 3'd2 ||
	       !ma_train_training_data[8]) ||
	      ma_train_training_data[5:3] == 3'd1 &&
	      (ma_train_training_data[8:6] == 3'b111 &&
	       random_bank1$OUT == 3'd2 ||
	       !ma_train_training_data[8]) ||
	      ma_train_training_data[5:3] == 3'd2) ;
  assign NOT_ma_train_training_data_BIT_23_31_32_AND_ma_ETC___d788 =
	     !ma_train_training_data[23] &&
	     (ma_train_training_data[5:3] == 3'd0 &&
	      (ma_train_training_data[9:6] == 4'b1111 &&
	       random_bank0$OUT == 3'd4 ||
	       !ma_train_training_data[6]) ||
	      ma_train_training_data[5:3] != 3'd0 &&
	      ma_train_training_data_BITS_5_TO_3_95_EQ_1_02__ETC___d785) ;
  assign _theResult____h10251 =
	     EN_ma_shadow ?
	       lv_global_history__h10361 :
	       lv_global_history__h10374 ;
  assign _theResult___fst__h6983 =
	     bram_bank3_a_read__3_BITS_8_TO_1_4_EQ_rg_pc_co_ETC___d72 ?
	       bram_bank3$DOA[11] :
	       _theResult___fst__h7151 ;
  assign _theResult___fst__h7151 =
	     bram_bank2_a_read__4_BITS_8_TO_1_5_EQ_rg_pc_co_ETC___d83 ?
	       bram_bank2$DOA[11] :
	       _theResult___fst__h7319 ;
  assign _theResult___fst__h7319 =
	     bram_bank1_a_read__5_BITS_8_TO_1_6_EQ_rg_pc_co_ETC___d94 ?
	       bram_bank1$DOA[11] :
	       bram_bimodal$DOA[3] ;
  assign _theResult___snd_fst__h7583 =
	     bram_bank3_a_read__3_BITS_8_TO_1_4_EQ_rg_pc_co_ETC___d72 ?
	       bram_bank3$DOA[11:9] :
	       _theResult___snd_fst__h7610 ;
  assign _theResult___snd_fst__h7610 =
	     bram_bank2_a_read__4_BITS_8_TO_1_5_EQ_rg_pc_co_ETC___d83 ?
	       bram_bank2$DOA[11:9] :
	       _theResult___snd_fst__h7637 ;
  assign _theResult___snd_fst__h7637 =
	     bram_bank1_a_read__5_BITS_8_TO_1_6_EQ_rg_pc_co_ETC___d94 ?
	       bram_bank1$DOA[11:9] :
	       bram_bimodal$DOA[3:1] ;
  assign _theResult___snd_snd_fst__h7709 =
	     bram_bank3_a_read__3_BITS_8_TO_1_4_EQ_rg_pc_co_ETC___d72 ?
	       3'b011 :
	       _theResult___snd_snd_fst__h7733 ;
  assign _theResult___snd_snd_fst__h7733 =
	     bram_bank2_a_read__4_BITS_8_TO_1_5_EQ_rg_pc_co_ETC___d83 ?
	       3'b010 :
	       _theResult___snd_snd_fst__h7757 ;
  assign _theResult___snd_snd_fst__h7757 =
	     bram_bank1_a_read__5_BITS_8_TO_1_6_EQ_rg_pc_co_ETC___d94 ?
	       3'b001 :
	       3'b0 ;
  assign _theResult___snd_snd_snd__h7710 =
	     bram_bank3_a_read__3_BITS_8_TO_1_4_EQ_rg_pc_co_ETC___d72 ?
	       bram_bank3$DOA[8:1] :
	       _theResult___snd_snd_snd__h7734 ;
  assign _theResult___snd_snd_snd__h7734 =
	     bram_bank2_a_read__4_BITS_8_TO_1_5_EQ_rg_pc_co_ETC___d83 ?
	       bram_bank2$DOA[8:1] :
	       bram_bank1$DOA[8:1] ;
  assign bram_bank1_a_read__5_BITS_8_TO_1_6_EQ_rg_pc_co_ETC___d94 =
	     bram_bank1$DOA[8:1] == y__h7322 ;
  assign bram_bank2_a_read__4_BITS_8_TO_1_5_EQ_rg_pc_co_ETC___d83 =
	     bram_bank2$DOA[8:1] == y__h7154 ;
  assign bram_bank3_a_read__3_BITS_8_TO_1_4_EQ_rg_pc_co_ETC___d72 =
	     bram_bank3$DOA[8:1] == y__h6986 ;
  assign bram_bank4_a_read__0_BITS_8_TO_1_1_EQ_rg_pc_co_ETC___d61 =
	     bram_bank4$DOA[8:1] == y__h6817 ;
  assign lv_global_history__h10361 =
	     { rg_global_history[78:0], 11'd0 } |
	     { 79'd0, crg_hist$port1__read } ;
  assign lv_global_history__h10374 =
	     { rg_global_history, crg_hist$port1__read[9:0] } ;
  assign lv_new_tag1__h7986 = x__h28617 ^ y__h28618 ;
  assign lv_new_tag2__h7987 = x__h28849 ^ y__h28850 ;
  assign lv_new_tag3__h7988 = x__h28896 ^ y__h28897 ;
  assign lv_new_tag4__h7989 = x__h28943 ^ y__h28944 ;
  assign lv_prediction__h6792 =
	     bram_bank4_a_read__0_BITS_8_TO_1_1_EQ_rg_pc_co_ETC___d61 ?
	       bram_bank4$DOA[11] :
	       _theResult___fst__h6983 ;
  assign ma_train_training_data_BITS_21_TO_19_97_MINUS_1___d628 =
	     ma_train_training_data[21:19] - 3'd1 ;
  assign ma_train_training_data_BITS_21_TO_19_97_PLUS_1___d625 =
	     ma_train_training_data[21:19] + 3'd1 ;
  assign ma_train_training_data_BITS_5_TO_3_95_EQ_1_02__ETC___d785 =
	     ma_train_training_data[5:3] == 3'd1 &&
	     (ma_train_training_data[8:6] == 3'b111 &&
	      random_bank1$OUT == 3'd4 ||
	      !ma_train_training_data[6]) ||
	     ma_train_training_data[5:3] == 3'd2 &&
	     (ma_train_training_data[7:6] == 2'b11 &&
	      random_bank2$OUT == 3'd4 ||
	      !ma_train_training_data[6]) ||
	     ma_train_training_data[5:3] == 3'd3 ||
	     ma_train_training_data[5:3] == 3'd4 ;
  assign ma_train_training_data_BIT_23_31_AND_ma_train__ETC___d623 =
	     ma_train_training_data[23] &&
	     (ma_train_training_data[22] &&
	      (ma_train_training_data[5:3] == 3'd0 &&
	       ma_train_training_data[21:19] != 3'b111 ||
	       ma_train_training_data[5:3] == 3'd1 ||
	       ma_train_training_data[5:3] == 3'd2 ||
	       ma_train_training_data[5:3] == 3'd3 ||
	       ma_train_training_data[5:3] == 3'd4) ||
	      !ma_train_training_data[22] &&
	      (ma_train_training_data[5:3] == 3'd0 &&
	       ma_train_training_data[21:19] != 3'b0 ||
	       ma_train_training_data[5:3] == 3'd1 ||
	       ma_train_training_data[5:3] == 3'd2 ||
	       ma_train_training_data[5:3] == 3'd3 ||
	       ma_train_training_data[5:3] == 3'd4)) ||
	     !ma_train_training_data[23] &&
	     (ma_train_training_data[22] &&
	      (ma_train_training_data[5:3] == 3'd0 &&
	       ma_train_training_data[21:19] != 3'b0 ||
	       ma_train_training_data[5:3] == 3'd1 ||
	       ma_train_training_data[5:3] == 3'd2 ||
	       ma_train_training_data[5:3] == 3'd3 ||
	       ma_train_training_data[5:3] == 3'd4) ||
	      !ma_train_training_data[22] &&
	      (ma_train_training_data[5:3] == 3'd0 &&
	       ma_train_training_data[21:19] != 3'b111 ||
	       ma_train_training_data[5:3] == 3'd1 ||
	       ma_train_training_data[5:3] == 3'd2 ||
	       ma_train_training_data[5:3] == 3'd3 ||
	       ma_train_training_data[5:3] == 3'd4)) ;
  assign ma_train_training_data_BIT_23_31_AND_ma_train__ETC___d749 =
	     ma_train_training_data[23] &&
	     ma_train_training_data[5:3] == 3'd3 ||
	     !ma_train_training_data[23] &&
	     (ma_train_training_data[5:3] == 3'd0 &&
	      (ma_train_training_data[9:6] == 4'b1111 &&
	       random_bank0$OUT == 3'd3 ||
	       !ma_train_training_data[7]) ||
	      NOT_ma_train_training_data_BITS_5_TO_3_95_EQ_0_ETC___d746) ;
  assign rg_bank2_csr_s_30_BIT_5_32_XOR_rg_real_global__ETC___d333 =
	     rg_bank2_csr_s[5] ^ rg_real_global_history[19] ;
  assign rg_real_global_history_61_BIT_19_62_XOR_IF_ma__ETC___d169 =
	     x__h10491 ^ rg_bank2_csr_indx[9] ;
  assign v__h10269 = { _theResult____h10251[89:1], y__h8408 } ;
  assign x1__h10467 =
	     { crg_bank2_csr_indx$port1__read[15:1],
	       rg_real_global_history_61_BIT_19_62_XOR_IF_ma__ETC___d169 } ;
  assign x1__h10589 = { crg_bank3_csr_indx$port1__read[15:1], x__h8404 } ;
  assign x1__h10709 = { crg_bank4_csr_indx$port1__read[15:1], x__h8500 } ;
  assign x1__h10832 =
	     { crg_bank1_csr_p$port1__read[13:1],
	       IF_ma_train_training_data_BIT_23_31_THEN_ma_tr_ETC___d426 } ;
  assign x1__h10931 = { crg_bank2_csr_p$port1__read[13:1], x__h8726 } ;
  assign x1__h11028 = { crg_bank3_csr_p$port1__read[13:1], x__h8817 } ;
  assign x1__h11148 = { crg_bank4_csr_p$port1__read[13:1], x__h8916 } ;
  assign x1__h11271 =
	     { crg_bank1_csr_s$port1__read[12:1],
	       IF_ma_train_training_data_BIT_23_31_THEN_ma_tr_ETC___d426 } ;
  assign x1__h11370 = { crg_bank2_csr_s$port1__read[12:1], x__h9149 } ;
  assign x1__h11467 = { crg_bank3_csr_s$port1__read[12:1], x__h9350 } ;
  assign x1__h11564 = { crg_bank4_csr_s$port1__read[12:1], x__h9535 } ;
  assign x1__h22156 = x__h22168 - 3'd1 ;
  assign x1__h8223 =
	     { crg_bank2_csr_indx$port1__read[14:0],
	       rg_real_global_history_61_BIT_19_62_XOR_IF_ma__ETC___d169 } ;
  assign x1__h8379 = { crg_bank3_csr_indx$port1__read[14:0], x__h8404 } ;
  assign x1__h8475 = { crg_bank4_csr_indx$port1__read[14:0], x__h8500 } ;
  assign x1__h8574 =
	     { crg_bank2_csr_p$port1__read[12:4],
	       x__h32024,
	       rg_bank2_csr_p[2:0],
	       x__h8726 } ;
  assign x1__h8776 = { crg_bank3_csr_p$port1__read[12:0], x__h8817 } ;
  assign x1__h8890 = { crg_bank4_csr_p$port1__read[12:0], x__h8916 } ;
  assign x1__h8990 =
	     { crg_bank2_csr_s$port1__read[11:7],
	       rg_bank2_csr_s[6],
	       rg_bank2_csr_s_30_BIT_5_32_XOR_rg_real_global__ETC___d333,
	       rg_bank2_csr_p[4:0],
	       x__h9149 } ;
  assign x1__h9200 =
	     { crg_bank3_csr_s$port1__read[11:5],
	       x__h32592,
	       rg_bank3_csr_p[3:0],
	       x__h9350 } ;
  assign x1__h9400 =
	     { crg_bank4_csr_s$port1__read[11:3],
	       x__h32740,
	       rg_bank4_csr_p[1:0],
	       x__h9535 } ;
  assign x1__h9585 =
	     { crg_bank1_csr_p$port1__read[12:6],
	       x__h31876,
	       rg_bank1_csr_p[4:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_ma_tr_ETC___d426 } ;
  assign x1__h9757 =
	     { crg_bank1_csr_s$port1__read[11:4],
	       x__h32324,
	       rg_bank1_csr_p[2:0],
	       IF_ma_train_training_data_BIT_23_31_THEN_ma_tr_ETC___d426 } ;
  assign x3__h23800 =
	     { ma_train_training_data_BITS_21_TO_19_97_PLUS_1___d625,
	       ma_train_training_data[18:11],
	       1'b1 } ;
  assign x3__h23918 = { ma_train_training_data[21:11], 1'b1 } ;
  assign x3__h25789 =
	     { ma_train_training_data_BITS_21_TO_19_97_MINUS_1___d628,
	       ma_train_training_data[18:11],
	       1'b1 } ;
  assign x3__h27513 =
	     { ma_train_training_data_BITS_21_TO_19_97_PLUS_1___d625,
	       ma_train_training_data[18:11],
	       1'b0 } ;
  assign x3__h27584 = { ma_train_training_data[21:11], 1'b0 } ;
  assign x3__h33026 =
	     { ma_train_training_data_BITS_21_TO_19_97_MINUS_1___d628,
	       ma_train_training_data[18:11],
	       1'b0 } ;
  assign x__h10047 = { rg_global_history[78:0], crg_hist$port1__read[9] } ;
  assign x__h10491 = rg_real_global_history[19] ^ y__h8408 ;
  assign x__h11978 = { 1'd0, _theResult____h10251[89:11] } ;
  assign x__h14089 = { 2'd0, _theResult____h10251[89:12] } ;
  assign x__h16180 = { 3'd0, _theResult____h10251[89:13] } ;
  assign x__h18271 = { 4'd0, _theResult____h10251[89:14] } ;
  assign x__h20362 = { 5'd0, _theResult____h10251[89:15] } ;
  assign x__h22168 =
	     EN_ma_shadow ? crg_inflight$port0__write_1 : crg_inflight ;
  assign x__h24203 =
	     ma_train_training_data[34:25] ^ ma_train_training_data[44:35] ;
  assign x__h26104 = ~rg_real_global_history[19] ;
  assign x__h26577 = ~rg_bank2_csr_p[7] ;
  assign x__h26632 = x__h26633 ^ rg_bank3_csr_p[7] ;
  assign x__h26633 = ~rg_real_global_history[39] ;
  assign x__h26709 = x__h26710 ^ rg_bank4_csr_p[7] ;
  assign x__h26710 = ~rg_real_global_history[79] ;
  assign x__h26880 = ~rg_bank1_csr_p[7] ;
  assign x__h27001 = ~rg_bank2_csr_p[6] ;
  assign x__h27150 = ~rg_bank3_csr_p[7] ;
  assign x__h27299 = ~rg_bank4_csr_p[7] ;
  assign x__h28617 = ma_train_training_data[32:25] ^ rg_bank1_csr_p ;
  assign x__h28849 = ma_train_training_data[32:25] ^ rg_bank2_csr_p ;
  assign x__h28896 = ma_train_training_data[32:25] ^ rg_bank3_csr_p ;
  assign x__h28943 = ma_train_training_data[32:25] ^ rg_bank4_csr_p ;
  assign x__h31627 = rg_real_global_history[19] ^ rg_bank2_csr_indx[9] ;
  assign x__h31703 = rg_real_global_history[39] ^ rg_bank3_csr_indx[9] ;
  assign x__h31779 = rg_real_global_history[79] ^ rg_bank4_csr_indx[9] ;
  assign x__h31876 = rg_real_global_history[9] ^ rg_bank1_csr_p[5] ;
  assign x__h32024 = rg_real_global_history[19] ^ rg_bank2_csr_p[3] ;
  assign x__h32151 = rg_real_global_history[39] ^ rg_bank3_csr_p[7] ;
  assign x__h32227 = rg_real_global_history[79] ^ rg_bank4_csr_p[7] ;
  assign x__h32324 = rg_real_global_history[9] ^ rg_bank1_csr_p[2] ;
  assign x__h32592 = rg_real_global_history[39] ^ rg_bank3_csr_p[4] ;
  assign x__h32740 = rg_real_global_history[79] ^ rg_bank4_csr_p[2] ;
  assign x__h37063 = x__h37074 ^ crg_bank2_csr_indx[9] ;
  assign x__h37074 = rg_global_history[9] ^ ma_shadow_prediction ;
  assign x__h37176 = x__h37608 ^ crg_bank3_csr_indx[9] ;
  assign x__h37277 = x__h37707 ^ crg_bank4_csr_indx[9] ;
  assign x__h37412 = rg_global_history[9] ^ crg_bank2_csr_p[3] ;
  assign x__h37515 = ma_shadow_prediction ^ crg_bank2_csr_p[7] ;
  assign x__h37607 = x__h37608 ^ crg_bank3_csr_p[7] ;
  assign x__h37608 = rg_global_history[29] ^ ma_shadow_prediction ;
  assign x__h37706 = x__h37707 ^ crg_bank4_csr_p[7] ;
  assign x__h37707 = rg_global_history[69] ^ ma_shadow_prediction ;
  assign x__h37959 = ma_shadow_prediction ^ crg_bank2_csr_p[6] ;
  assign x__h38070 = rg_global_history[29] ^ crg_bank3_csr_p[4] ;
  assign x__h38169 = ma_shadow_prediction ^ crg_bank3_csr_p[7] ;
  assign x__h38267 = rg_global_history[69] ^ crg_bank4_csr_p[2] ;
  assign x__h38366 = ma_shadow_prediction ^ crg_bank4_csr_p[7] ;
  assign x__h38786 = crg_hist[9] ^ crg_bank1_csr_p[2] ;
  assign x__h38880 = ma_shadow_prediction ^ crg_bank1_csr_p[7] ;
  assign x__h6659 = ma_put_pc[9:0] ^ ma_put_pc[19:10] ;
  assign x__h6853 = rg_pc_copy[7:0] ^ crg_bank4_csr_p[7:0] ;
  assign x__h7022 = rg_pc_copy[7:0] ^ crg_bank3_csr_p[7:0] ;
  assign x__h7190 = rg_pc_copy[7:0] ^ crg_bank2_csr_p[7:0] ;
  assign x__h7358 = rg_pc_copy[7:0] ^ crg_bank1_csr_p[7:0] ;
  assign x__h7557 =
	     bram_bank4_a_read__0_BITS_8_TO_1_1_EQ_rg_pc_co_ETC___d61 ?
	       bram_bank4$DOA[11:9] :
	       _theResult___snd_fst__h7583 ;
  assign x__h7686 =
	     bram_bank4_a_read__0_BITS_8_TO_1_1_EQ_rg_pc_co_ETC___d61 ?
	       bram_bank4$DOA[8:1] :
	       _theResult___snd_snd_snd__h7710 ;
  assign x__h7787 =
	     { bram_bimodal$DOA[0],
	       bram_bank1$DOA[0],
	       bram_bank2$DOA[0],
	       bram_bank3$DOA[0],
	       bram_bank4$DOA[0] } ;
  assign x__h7893 =
	     bram_bank4_a_read__0_BITS_8_TO_1_1_EQ_rg_pc_co_ETC___d61 ?
	       3'b100 :
	       _theResult___snd_snd_fst__h7709 ;
  assign x__h8404 = x__h8405 ^ rg_bank3_csr_indx[9] ;
  assign x__h8405 = rg_real_global_history[39] ^ y__h8408 ;
  assign x__h8500 = x__h8501 ^ rg_bank4_csr_indx[9] ;
  assign x__h8501 = rg_real_global_history[79] ^ y__h8408 ;
  assign x__h8726 = y__h8408 ^ rg_bank2_csr_p[7] ;
  assign x__h8817 = x__h8405 ^ rg_bank3_csr_p[7] ;
  assign x__h8916 = x__h8501 ^ rg_bank4_csr_p[7] ;
  assign x__h9149 = y__h8408 ^ rg_bank2_csr_p[6] ;
  assign x__h9350 = y__h8408 ^ rg_bank3_csr_p[7] ;
  assign x__h9535 = y__h8408 ^ rg_bank4_csr_p[7] ;
  assign y__h28618 = { rg_bank1_csr_s, 1'b0 } ;
  assign y__h28850 = { rg_bank2_csr_s, 1'b0 } ;
  assign y__h28897 = { rg_bank3_csr_s, 1'b0 } ;
  assign y__h28944 = { rg_bank4_csr_s, 1'b0 } ;
  assign y__h6817 = x__h6853 ^ y__h6854 ;
  assign y__h6854 = { crg_bank4_csr_s[6:0], 1'b0 } ;
  assign y__h6986 = x__h7022 ^ y__h7023 ;
  assign y__h7023 = { crg_bank3_csr_s[6:0], 1'b0 } ;
  assign y__h7154 = x__h7190 ^ y__h7191 ;
  assign y__h7191 = { crg_bank2_csr_s[6:0], 1'b0 } ;
  assign y__h7322 = x__h7358 ^ y__h7359 ;
  assign y__h7359 = { crg_bank1_csr_s[6:0], 1'b0 } ;
  assign y__h8408 =
	     !(ma_train_training_data[23] ^ ma_train_training_data[22]) ;
  always@(ma_train_training_data or
	  IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d678 or
	  IF_ma_train_training_data_BIT_10_31_THEN_0b11__ETC___d668 or
	  lv_new_tag3__h7988)
  begin
    case (ma_train_training_data[5:3])
      3'd0, 3'd1, 3'd2:
	  IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d758 =
	      { IF_ma_train_training_data_BIT_10_31_THEN_0b11__ETC___d668,
		lv_new_tag3__h7988,
		1'b0 };
      default: IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d758 =
		   IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d678;
    endcase
  end
  always@(ma_train_training_data or
	  IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d684 or
	  IF_ma_train_training_data_BIT_10_31_OR_ma_trai_ETC___d681 or
	  lv_new_tag3__h7988)
  begin
    case (ma_train_training_data[5:3])
      3'd0, 3'd1, 3'd2:
	  IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d760 =
	      { IF_ma_train_training_data_BIT_10_31_OR_ma_trai_ETC___d681,
		lv_new_tag3__h7988,
		1'b0 };
      default: IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d760 =
		   IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d684;
    endcase
  end
  always@(ma_train_training_data or
	  IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d678 or
	  IF_ma_train_training_data_BIT_10_31_THEN_0b11__ETC___d668 or
	  lv_new_tag4__h7989)
  begin
    case (ma_train_training_data[5:3])
      3'd0, 3'd1, 3'd2, 3'd3:
	  IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d799 =
	      { IF_ma_train_training_data_BIT_10_31_THEN_0b11__ETC___d668,
		lv_new_tag4__h7989,
		1'b0 };
      default: IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d799 =
		   IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d678;
    endcase
  end
  always@(ma_train_training_data or
	  IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d684 or
	  IF_ma_train_training_data_BIT_10_31_OR_ma_trai_ETC___d681 or
	  lv_new_tag4__h7989)
  begin
    case (ma_train_training_data[5:3])
      3'd0, 3'd1, 3'd2, 3'd3:
	  IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d801 =
	      { IF_ma_train_training_data_BIT_10_31_OR_ma_trai_ETC___d681,
		lv_new_tag4__h7989,
		1'b0 };
      default: IF_ma_train_training_data_BITS_5_TO_3_95_EQ_0__ETC___d801 =
		   IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d684;
    endcase
  end
  always@(ma_train_training_data or
	  IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d678 or
	  IF_ma_train_training_data_BIT_10_31_THEN_0b11__ETC___d668 or
	  lv_new_tag2__h7987)
  begin
    case (ma_train_training_data[5:3])
      3'd0, 3'd1:
	  CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q1 =
	      { IF_ma_train_training_data_BIT_10_31_THEN_0b11__ETC___d668,
		lv_new_tag2__h7987,
		1'b0 };
      default: CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q1 =
		   IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d678;
    endcase
  end
  always@(ma_train_training_data or
	  IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d684 or
	  IF_ma_train_training_data_BIT_10_31_OR_ma_trai_ETC___d681 or
	  lv_new_tag2__h7987)
  begin
    case (ma_train_training_data[5:3])
      3'd0, 3'd1:
	  CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q2 =
	      { IF_ma_train_training_data_BIT_10_31_OR_ma_trai_ETC___d681,
		lv_new_tag2__h7987,
		1'b0 };
      default: CASE_ma_train_training_data_BITS_5_TO_3_0_IF_m_ETC__q2 =
		   IF_ma_train_training_data_BITS_21_TO_19_97_EQ__ETC___d684;
    endcase
  end
  always@(x__h22168 or crg_bank1_csr_p$port1__read)
  begin
    case (x__h22168)
      3'd2:
	  CASE_x2168_2_0_CONCAT_crg_bank1_csr_pport1__r_ETC__q3 =
	      { 1'd0, crg_bank1_csr_p$port1__read[13:9] };
      3'd3:
	  CASE_x2168_2_0_CONCAT_crg_bank1_csr_pport1__r_ETC__q3 =
	      { 2'd0, crg_bank1_csr_p$port1__read[13:10] };
      3'd4:
	  CASE_x2168_2_0_CONCAT_crg_bank1_csr_pport1__r_ETC__q3 =
	      { 3'd0, crg_bank1_csr_p$port1__read[13:11] };
      3'd5:
	  CASE_x2168_2_0_CONCAT_crg_bank1_csr_pport1__r_ETC__q3 =
	      { 4'd0, crg_bank1_csr_p$port1__read[13:12] };
      default: CASE_x2168_2_0_CONCAT_crg_bank1_csr_pport1__r_ETC__q3 =
		   { 5'd0, crg_bank1_csr_p$port1__read[13] };
    endcase
  end
  always@(x__h22168 or crg_bank2_csr_p$port1__read)
  begin
    case (x__h22168)
      3'd2:
	  CASE_x2168_2_0_CONCAT_crg_bank2_csr_pport1__r_ETC__q4 =
	      { 1'd0, crg_bank2_csr_p$port1__read[13:9] };
      3'd3:
	  CASE_x2168_2_0_CONCAT_crg_bank2_csr_pport1__r_ETC__q4 =
	      { 2'd0, crg_bank2_csr_p$port1__read[13:10] };
      3'd4:
	  CASE_x2168_2_0_CONCAT_crg_bank2_csr_pport1__r_ETC__q4 =
	      { 3'd0, crg_bank2_csr_p$port1__read[13:11] };
      3'd5:
	  CASE_x2168_2_0_CONCAT_crg_bank2_csr_pport1__r_ETC__q4 =
	      { 4'd0, crg_bank2_csr_p$port1__read[13:12] };
      default: CASE_x2168_2_0_CONCAT_crg_bank2_csr_pport1__r_ETC__q4 =
		   { 5'd0, crg_bank2_csr_p$port1__read[13] };
    endcase
  end
  always@(x__h22168 or crg_bank3_csr_p$port1__read)
  begin
    case (x__h22168)
      3'd2:
	  CASE_x2168_2_0_CONCAT_crg_bank3_csr_pport1__r_ETC__q5 =
	      { 1'd0, crg_bank3_csr_p$port1__read[13:9] };
      3'd3:
	  CASE_x2168_2_0_CONCAT_crg_bank3_csr_pport1__r_ETC__q5 =
	      { 2'd0, crg_bank3_csr_p$port1__read[13:10] };
      3'd4:
	  CASE_x2168_2_0_CONCAT_crg_bank3_csr_pport1__r_ETC__q5 =
	      { 3'd0, crg_bank3_csr_p$port1__read[13:11] };
      3'd5:
	  CASE_x2168_2_0_CONCAT_crg_bank3_csr_pport1__r_ETC__q5 =
	      { 4'd0, crg_bank3_csr_p$port1__read[13:12] };
      default: CASE_x2168_2_0_CONCAT_crg_bank3_csr_pport1__r_ETC__q5 =
		   { 5'd0, crg_bank3_csr_p$port1__read[13] };
    endcase
  end
  always@(x__h22168 or crg_bank4_csr_p$port1__read)
  begin
    case (x__h22168)
      3'd2:
	  CASE_x2168_2_0_CONCAT_crg_bank4_csr_pport1__r_ETC__q6 =
	      { 1'd0, crg_bank4_csr_p$port1__read[13:9] };
      3'd3:
	  CASE_x2168_2_0_CONCAT_crg_bank4_csr_pport1__r_ETC__q6 =
	      { 2'd0, crg_bank4_csr_p$port1__read[13:10] };
      3'd4:
	  CASE_x2168_2_0_CONCAT_crg_bank4_csr_pport1__r_ETC__q6 =
	      { 3'd0, crg_bank4_csr_p$port1__read[13:11] };
      3'd5:
	  CASE_x2168_2_0_CONCAT_crg_bank4_csr_pport1__r_ETC__q6 =
	      { 4'd0, crg_bank4_csr_p$port1__read[13:12] };
      default: CASE_x2168_2_0_CONCAT_crg_bank4_csr_pport1__r_ETC__q6 =
		   { 5'd0, crg_bank4_csr_p$port1__read[13] };
    endcase
  end
  always@(x__h22168 or crg_bank1_csr_s$port1__read)
  begin
    case (x__h22168)
      3'd2:
	  CASE_x2168_2_0_CONCAT_crg_bank1_csr_sport1__r_ETC__q7 =
	      { 1'd0, crg_bank1_csr_s$port1__read[12:8] };
      3'd3:
	  CASE_x2168_2_0_CONCAT_crg_bank1_csr_sport1__r_ETC__q7 =
	      { 2'd0, crg_bank1_csr_s$port1__read[12:9] };
      3'd4:
	  CASE_x2168_2_0_CONCAT_crg_bank1_csr_sport1__r_ETC__q7 =
	      { 3'd0, crg_bank1_csr_s$port1__read[12:10] };
      3'd5:
	  CASE_x2168_2_0_CONCAT_crg_bank1_csr_sport1__r_ETC__q7 =
	      { 4'd0, crg_bank1_csr_s$port1__read[12:11] };
      default: CASE_x2168_2_0_CONCAT_crg_bank1_csr_sport1__r_ETC__q7 =
		   { 5'd0, crg_bank1_csr_s$port1__read[12] };
    endcase
  end
  always@(x__h22168 or crg_bank2_csr_s$port1__read)
  begin
    case (x__h22168)
      3'd2:
	  CASE_x2168_2_0_CONCAT_crg_bank2_csr_sport1__r_ETC__q8 =
	      { 1'd0, crg_bank2_csr_s$port1__read[12:8] };
      3'd3:
	  CASE_x2168_2_0_CONCAT_crg_bank2_csr_sport1__r_ETC__q8 =
	      { 2'd0, crg_bank2_csr_s$port1__read[12:9] };
      3'd4:
	  CASE_x2168_2_0_CONCAT_crg_bank2_csr_sport1__r_ETC__q8 =
	      { 3'd0, crg_bank2_csr_s$port1__read[12:10] };
      3'd5:
	  CASE_x2168_2_0_CONCAT_crg_bank2_csr_sport1__r_ETC__q8 =
	      { 4'd0, crg_bank2_csr_s$port1__read[12:11] };
      default: CASE_x2168_2_0_CONCAT_crg_bank2_csr_sport1__r_ETC__q8 =
		   { 5'd0, crg_bank2_csr_s$port1__read[12] };
    endcase
  end
  always@(x__h22168 or crg_bank3_csr_s$port1__read)
  begin
    case (x__h22168)
      3'd2:
	  CASE_x2168_2_0_CONCAT_crg_bank3_csr_sport1__r_ETC__q9 =
	      { 1'd0, crg_bank3_csr_s$port1__read[12:8] };
      3'd3:
	  CASE_x2168_2_0_CONCAT_crg_bank3_csr_sport1__r_ETC__q9 =
	      { 2'd0, crg_bank3_csr_s$port1__read[12:9] };
      3'd4:
	  CASE_x2168_2_0_CONCAT_crg_bank3_csr_sport1__r_ETC__q9 =
	      { 3'd0, crg_bank3_csr_s$port1__read[12:10] };
      3'd5:
	  CASE_x2168_2_0_CONCAT_crg_bank3_csr_sport1__r_ETC__q9 =
	      { 4'd0, crg_bank3_csr_s$port1__read[12:11] };
      default: CASE_x2168_2_0_CONCAT_crg_bank3_csr_sport1__r_ETC__q9 =
		   { 5'd0, crg_bank3_csr_s$port1__read[12] };
    endcase
  end
  always@(x__h22168 or crg_bank4_csr_s$port1__read)
  begin
    case (x__h22168)
      3'd2:
	  CASE_x2168_2_0_CONCAT_crg_bank4_csr_sport1__r_ETC__q10 =
	      { 1'd0, crg_bank4_csr_s$port1__read[12:8] };
      3'd3:
	  CASE_x2168_2_0_CONCAT_crg_bank4_csr_sport1__r_ETC__q10 =
	      { 2'd0, crg_bank4_csr_s$port1__read[12:9] };
      3'd4:
	  CASE_x2168_2_0_CONCAT_crg_bank4_csr_sport1__r_ETC__q10 =
	      { 3'd0, crg_bank4_csr_s$port1__read[12:10] };
      3'd5:
	  CASE_x2168_2_0_CONCAT_crg_bank4_csr_sport1__r_ETC__q10 =
	      { 4'd0, crg_bank4_csr_s$port1__read[12:11] };
      default: CASE_x2168_2_0_CONCAT_crg_bank4_csr_sport1__r_ETC__q10 =
		   { 5'd0, crg_bank4_csr_s$port1__read[12] };
    endcase
  end
  always@(x__h22168 or crg_bank2_csr_indx$port1__read)
  begin
    case (x__h22168)
      3'd2:
	  CASE_x2168_2_0_CONCAT_crg_bank2_csr_indxport1_ETC__q11 =
	      { 1'd0, crg_bank2_csr_indx$port1__read[15:11] };
      3'd3:
	  CASE_x2168_2_0_CONCAT_crg_bank2_csr_indxport1_ETC__q11 =
	      { 2'd0, crg_bank2_csr_indx$port1__read[15:12] };
      3'd4:
	  CASE_x2168_2_0_CONCAT_crg_bank2_csr_indxport1_ETC__q11 =
	      { 3'd0, crg_bank2_csr_indx$port1__read[15:13] };
      3'd5:
	  CASE_x2168_2_0_CONCAT_crg_bank2_csr_indxport1_ETC__q11 =
	      { 4'd0, crg_bank2_csr_indx$port1__read[15:14] };
      default: CASE_x2168_2_0_CONCAT_crg_bank2_csr_indxport1_ETC__q11 =
		   { 5'd0, crg_bank2_csr_indx$port1__read[15] };
    endcase
  end
  always@(x__h22168 or crg_bank3_csr_indx$port1__read)
  begin
    case (x__h22168)
      3'd2:
	  CASE_x2168_2_0_CONCAT_crg_bank3_csr_indxport1_ETC__q12 =
	      { 1'd0, crg_bank3_csr_indx$port1__read[15:11] };
      3'd3:
	  CASE_x2168_2_0_CONCAT_crg_bank3_csr_indxport1_ETC__q12 =
	      { 2'd0, crg_bank3_csr_indx$port1__read[15:12] };
      3'd4:
	  CASE_x2168_2_0_CONCAT_crg_bank3_csr_indxport1_ETC__q12 =
	      { 3'd0, crg_bank3_csr_indx$port1__read[15:13] };
      3'd5:
	  CASE_x2168_2_0_CONCAT_crg_bank3_csr_indxport1_ETC__q12 =
	      { 4'd0, crg_bank3_csr_indx$port1__read[15:14] };
      default: CASE_x2168_2_0_CONCAT_crg_bank3_csr_indxport1_ETC__q12 =
		   { 5'd0, crg_bank3_csr_indx$port1__read[15] };
    endcase
  end
  always@(x__h22168 or crg_bank4_csr_indx$port1__read)
  begin
    case (x__h22168)
      3'd2:
	  CASE_x2168_2_0_CONCAT_crg_bank4_csr_indxport1_ETC__q13 =
	      { 1'd0, crg_bank4_csr_indx$port1__read[15:11] };
      3'd3:
	  CASE_x2168_2_0_CONCAT_crg_bank4_csr_indxport1_ETC__q13 =
	      { 2'd0, crg_bank4_csr_indx$port1__read[15:12] };
      3'd4:
	  CASE_x2168_2_0_CONCAT_crg_bank4_csr_indxport1_ETC__q13 =
	      { 3'd0, crg_bank4_csr_indx$port1__read[15:13] };
      3'd5:
	  CASE_x2168_2_0_CONCAT_crg_bank4_csr_indxport1_ETC__q13 =
	      { 4'd0, crg_bank4_csr_indx$port1__read[15:14] };
      default: CASE_x2168_2_0_CONCAT_crg_bank4_csr_indxport1_ETC__q13 =
		   { 5'd0, crg_bank4_csr_indx$port1__read[15] };
    endcase
  end
  always@(x__h22168 or _theResult____h10251 or crg_hist$port1__read)
  begin
    case (x__h22168)
      3'd0:
	  CASE_x2168_0_crg_histport1__read_BITS_9_TO_0__ETC__q15 =
	      crg_hist$port1__read[9:0];
      3'd1:
	  CASE_x2168_0_crg_histport1__read_BITS_9_TO_0__ETC__q15 =
	      _theResult____h10251[10:1];
      3'd2:
	  CASE_x2168_0_crg_histport1__read_BITS_9_TO_0__ETC__q15 =
	      _theResult____h10251[11:2];
      3'd3:
	  CASE_x2168_0_crg_histport1__read_BITS_9_TO_0__ETC__q15 =
	      _theResult____h10251[12:3];
      3'd4:
	  CASE_x2168_0_crg_histport1__read_BITS_9_TO_0__ETC__q15 =
	      _theResult____h10251[13:4];
      3'd5:
	  CASE_x2168_0_crg_histport1__read_BITS_9_TO_0__ETC__q15 =
	      _theResult____h10251[14:5];
      default: CASE_x2168_0_crg_histport1__read_BITS_9_TO_0__ETC__q15 =
		   _theResult____h10251[15:6];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        crg_bank1_csr_p <= `BSV_ASSIGNMENT_DELAY 14'd0;
	crg_bank1_csr_s <= `BSV_ASSIGNMENT_DELAY 13'd0;
	crg_bank2_csr_indx <= `BSV_ASSIGNMENT_DELAY 16'd0;
	crg_bank2_csr_p <= `BSV_ASSIGNMENT_DELAY 14'd0;
	crg_bank2_csr_s <= `BSV_ASSIGNMENT_DELAY 13'd0;
	crg_bank3_csr_indx <= `BSV_ASSIGNMENT_DELAY 16'd0;
	crg_bank3_csr_p <= `BSV_ASSIGNMENT_DELAY 14'd0;
	crg_bank3_csr_s <= `BSV_ASSIGNMENT_DELAY 13'd0;
	crg_bank4_csr_indx <= `BSV_ASSIGNMENT_DELAY 16'd0;
	crg_bank4_csr_p <= `BSV_ASSIGNMENT_DELAY 14'd0;
	crg_bank4_csr_s <= `BSV_ASSIGNMENT_DELAY 13'd0;
	crg_hist <= `BSV_ASSIGNMENT_DELAY 11'd0;
	crg_inflight <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dump1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dump2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dump3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	file_open <= `BSV_ASSIGNMENT_DELAY 1'd1;
	random_bank0_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	random_bank1_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	random_bank2_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_bank1_csr_p <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_bank1_csr_s <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_bank2_csr_indx <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_bank2_csr_p <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_bank2_csr_s <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_bank3_csr_indx <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_bank3_csr_p <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_bank3_csr_s <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_bank4_csr_indx <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_bank4_csr_p <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_bank4_csr_s <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_bimodal_flush_addr <= `BSV_ASSIGNMENT_DELAY 13'd0;
	rg_choice <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_flush <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_global_flush_addr <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_global_history <= `BSV_ASSIGNMENT_DELAY 80'd0;
	rg_init_rand <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_pc_copy <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_real_global_history <= `BSV_ASSIGNMENT_DELAY 80'd0;
      end
    else
      begin
        if (crg_bank1_csr_p$EN)
	  crg_bank1_csr_p <= `BSV_ASSIGNMENT_DELAY crg_bank1_csr_p$D_IN;
	if (crg_bank1_csr_s$EN)
	  crg_bank1_csr_s <= `BSV_ASSIGNMENT_DELAY crg_bank1_csr_s$D_IN;
	if (crg_bank2_csr_indx$EN)
	  crg_bank2_csr_indx <= `BSV_ASSIGNMENT_DELAY crg_bank2_csr_indx$D_IN;
	if (crg_bank2_csr_p$EN)
	  crg_bank2_csr_p <= `BSV_ASSIGNMENT_DELAY crg_bank2_csr_p$D_IN;
	if (crg_bank2_csr_s$EN)
	  crg_bank2_csr_s <= `BSV_ASSIGNMENT_DELAY crg_bank2_csr_s$D_IN;
	if (crg_bank3_csr_indx$EN)
	  crg_bank3_csr_indx <= `BSV_ASSIGNMENT_DELAY crg_bank3_csr_indx$D_IN;
	if (crg_bank3_csr_p$EN)
	  crg_bank3_csr_p <= `BSV_ASSIGNMENT_DELAY crg_bank3_csr_p$D_IN;
	if (crg_bank3_csr_s$EN)
	  crg_bank3_csr_s <= `BSV_ASSIGNMENT_DELAY crg_bank3_csr_s$D_IN;
	if (crg_bank4_csr_indx$EN)
	  crg_bank4_csr_indx <= `BSV_ASSIGNMENT_DELAY crg_bank4_csr_indx$D_IN;
	if (crg_bank4_csr_p$EN)
	  crg_bank4_csr_p <= `BSV_ASSIGNMENT_DELAY crg_bank4_csr_p$D_IN;
	if (crg_bank4_csr_s$EN)
	  crg_bank4_csr_s <= `BSV_ASSIGNMENT_DELAY crg_bank4_csr_s$D_IN;
	if (crg_hist$EN) crg_hist <= `BSV_ASSIGNMENT_DELAY crg_hist$D_IN;
	if (crg_inflight$EN)
	  crg_inflight <= `BSV_ASSIGNMENT_DELAY crg_inflight$D_IN;
	if (dump1$EN) dump1 <= `BSV_ASSIGNMENT_DELAY dump1$D_IN;
	if (dump2$EN) dump2 <= `BSV_ASSIGNMENT_DELAY dump2$D_IN;
	if (dump3$EN) dump3 <= `BSV_ASSIGNMENT_DELAY dump3$D_IN;
	if (file_open$EN) file_open <= `BSV_ASSIGNMENT_DELAY file_open$D_IN;
	if (random_bank0_initialized$EN)
	  random_bank0_initialized <= `BSV_ASSIGNMENT_DELAY
	      random_bank0_initialized$D_IN;
	if (random_bank1_initialized$EN)
	  random_bank1_initialized <= `BSV_ASSIGNMENT_DELAY
	      random_bank1_initialized$D_IN;
	if (random_bank2_initialized$EN)
	  random_bank2_initialized <= `BSV_ASSIGNMENT_DELAY
	      random_bank2_initialized$D_IN;
	if (rg_bank1_csr_p$EN)
	  rg_bank1_csr_p <= `BSV_ASSIGNMENT_DELAY rg_bank1_csr_p$D_IN;
	if (rg_bank1_csr_s$EN)
	  rg_bank1_csr_s <= `BSV_ASSIGNMENT_DELAY rg_bank1_csr_s$D_IN;
	if (rg_bank2_csr_indx$EN)
	  rg_bank2_csr_indx <= `BSV_ASSIGNMENT_DELAY rg_bank2_csr_indx$D_IN;
	if (rg_bank2_csr_p$EN)
	  rg_bank2_csr_p <= `BSV_ASSIGNMENT_DELAY rg_bank2_csr_p$D_IN;
	if (rg_bank2_csr_s$EN)
	  rg_bank2_csr_s <= `BSV_ASSIGNMENT_DELAY rg_bank2_csr_s$D_IN;
	if (rg_bank3_csr_indx$EN)
	  rg_bank3_csr_indx <= `BSV_ASSIGNMENT_DELAY rg_bank3_csr_indx$D_IN;
	if (rg_bank3_csr_p$EN)
	  rg_bank3_csr_p <= `BSV_ASSIGNMENT_DELAY rg_bank3_csr_p$D_IN;
	if (rg_bank3_csr_s$EN)
	  rg_bank3_csr_s <= `BSV_ASSIGNMENT_DELAY rg_bank3_csr_s$D_IN;
	if (rg_bank4_csr_indx$EN)
	  rg_bank4_csr_indx <= `BSV_ASSIGNMENT_DELAY rg_bank4_csr_indx$D_IN;
	if (rg_bank4_csr_p$EN)
	  rg_bank4_csr_p <= `BSV_ASSIGNMENT_DELAY rg_bank4_csr_p$D_IN;
	if (rg_bank4_csr_s$EN)
	  rg_bank4_csr_s <= `BSV_ASSIGNMENT_DELAY rg_bank4_csr_s$D_IN;
	if (rg_bimodal_flush_addr$EN)
	  rg_bimodal_flush_addr <= `BSV_ASSIGNMENT_DELAY
	      rg_bimodal_flush_addr$D_IN;
	if (rg_choice$EN) rg_choice <= `BSV_ASSIGNMENT_DELAY rg_choice$D_IN;
	if (rg_flush$EN) rg_flush <= `BSV_ASSIGNMENT_DELAY rg_flush$D_IN;
	if (rg_global_flush_addr$EN)
	  rg_global_flush_addr <= `BSV_ASSIGNMENT_DELAY
	      rg_global_flush_addr$D_IN;
	if (rg_global_history$EN)
	  rg_global_history <= `BSV_ASSIGNMENT_DELAY rg_global_history$D_IN;
	if (rg_init_rand$EN)
	  rg_init_rand <= `BSV_ASSIGNMENT_DELAY rg_init_rand$D_IN;
	if (rg_pc_copy$EN)
	  rg_pc_copy <= `BSV_ASSIGNMENT_DELAY rg_pc_copy$D_IN;
	if (rg_real_global_history$EN)
	  rg_real_global_history <= `BSV_ASSIGNMENT_DELAY
	      rg_real_global_history$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    crg_bank1_csr_p = 14'h2AAA;
    crg_bank1_csr_s = 13'h0AAA;
    crg_bank2_csr_indx = 16'hAAAA;
    crg_bank2_csr_p = 14'h2AAA;
    crg_bank2_csr_s = 13'h0AAA;
    crg_bank3_csr_indx = 16'hAAAA;
    crg_bank3_csr_p = 14'h2AAA;
    crg_bank3_csr_s = 13'h0AAA;
    crg_bank4_csr_indx = 16'hAAAA;
    crg_bank4_csr_p = 14'h2AAA;
    crg_bank4_csr_s = 13'h0AAA;
    crg_hist = 11'h2AA;
    crg_inflight = 3'h2;
    dump1 = 32'hAAAAAAAA;
    dump2 = 32'hAAAAAAAA;
    dump3 = 32'hAAAAAAAA;
    file_open = 1'h0;
    random_bank0_initialized = 1'h0;
    random_bank1_initialized = 1'h0;
    random_bank2_initialized = 1'h0;
    rg_bank1_csr_p = 8'hAA;
    rg_bank1_csr_s = 7'h2A;
    rg_bank2_csr_indx = 10'h2AA;
    rg_bank2_csr_p = 8'hAA;
    rg_bank2_csr_s = 7'h2A;
    rg_bank3_csr_indx = 10'h2AA;
    rg_bank3_csr_p = 8'hAA;
    rg_bank3_csr_s = 7'h2A;
    rg_bank4_csr_indx = 10'h2AA;
    rg_bank4_csr_p = 8'hAA;
    rg_bank4_csr_s = 7'h2A;
    rg_bimodal_flush_addr = 13'h0AAA;
    rg_choice = 1'h0;
    rg_flush = 1'h0;
    rg_global_flush_addr = 10'h2AA;
    rg_global_history = 80'hAAAAAAAAAAAAAAAAAAAA;
    rg_init_rand = 1'h0;
    rg_pc_copy = 32'hAAAAAAAA;
    rg_real_global_history = 80'hAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (file_open)
	begin
	  TASK_fopen___d20 = $fopen("trace1.dump", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (file_open)
	begin
	  TASK_fopen___d21 = $fopen("trace5.dump", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (file_open)
	begin
	  TASK_fopen___d22 = $fopen("trace7.dump", "w");
	  #0;
	end
  end
  // synopsys translate_on
endmodule  // mkbranch

